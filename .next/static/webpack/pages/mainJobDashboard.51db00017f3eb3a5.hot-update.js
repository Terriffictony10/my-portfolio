"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/mainJobDashboard",{

/***/ "./src/store/interactions.js":
/*!***********************************!*\
  !*** ./src/store/interactions.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNewMenuItem: function() { return /* binding */ addNewMenuItem; },\n/* harmony export */   addTicketOrders: function() { return /* binding */ addTicketOrders; },\n/* harmony export */   bufferItemForTicket: function() { return /* binding */ bufferItemForTicket; },\n/* harmony export */   clearActiveTicket: function() { return /* binding */ clearActiveTicket; },\n/* harmony export */   createNewJob: function() { return /* binding */ createNewJob; },\n/* harmony export */   createNewRestaurant: function() { return /* binding */ createNewRestaurant; },\n/* harmony export */   createPOS: function() { return /* binding */ createPOS; },\n/* harmony export */   createTicketForPOS: function() { return /* binding */ createTicketForPOS; },\n/* harmony export */   decorateMyRestaurants: function() { return /* binding */ decorateMyRestaurants; },\n/* harmony export */   endService: function() { return /* binding */ endService; },\n/* harmony export */   hireNewEmployee: function() { return /* binding */ hireNewEmployee; },\n/* harmony export */   loadAccount: function() { return /* binding */ loadAccount; },\n/* harmony export */   loadAllEmployees: function() { return /* binding */ loadAllEmployees; },\n/* harmony export */   loadAllJobs: function() { return /* binding */ loadAllJobs; },\n/* harmony export */   loadAllMenuItems: function() { return /* binding */ loadAllMenuItems; },\n/* harmony export */   loadAllPOS: function() { return /* binding */ loadAllPOS; },\n/* harmony export */   loadAllRestaurants: function() { return /* binding */ loadAllRestaurants; },\n/* harmony export */   loadAllServices: function() { return /* binding */ loadAllServices; },\n/* harmony export */   loadAllTicketsForPOS: function() { return /* binding */ loadAllTicketsForPOS; },\n/* harmony export */   loadDashboardRestaurantContractData: function() { return /* binding */ loadDashboardRestaurantContractData; },\n/* harmony export */   loadEmployeeRelevantPOS: function() { return /* binding */ loadEmployeeRelevantPOS; },\n/* harmony export */   loadFactory: function() { return /* binding */ loadFactory; },\n/* harmony export */   loadFullTicketDetails: function() { return /* binding */ loadFullTicketDetails; },\n/* harmony export */   loadMenuItemsForPOS: function() { return /* binding */ loadMenuItemsForPOS; },\n/* harmony export */   loadMyRestaurants: function() { return /* binding */ loadMyRestaurants; },\n/* harmony export */   loadNetwork: function() { return /* binding */ loadNetwork; },\n/* harmony export */   loadProvider: function() { return /* binding */ loadProvider; },\n/* harmony export */   ringBufferedItems: function() { return /* binding */ ringBufferedItems; },\n/* harmony export */   setActiveTicket: function() { return /* binding */ setActiveTicket; },\n/* harmony export */   startService: function() { return /* binding */ startService; },\n/* harmony export */   subscribeToEvents: function() { return /* binding */ subscribeToEvents; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abis/Restaurant.json */ \"./src/abis/Restaurant.json\");\n/* harmony import */ var _abis_decentratalityServiceFactory_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abis/decentratalityServiceFactory.json */ \"./src/abis/decentratalityServiceFactory.json\");\n/* harmony import */ var _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abis/POS.json */ \"./src/abis/POS.json\");\n// src/store/interactions.js\n\n\n\n\n\nlet GlobalRestaurants = [];\nconst loadProvider = async (dispatch)=>{\n    const connection = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.BrowserProvider(window.ethereum);\n    dispatch({\n        type: \"PROVIDER_LOADED\",\n        connection\n    });\n    return connection;\n};\nconst loadAccount = async (provider, dispatch)=>{\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    const account = ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.getAddress(accounts[0]);\n    dispatch({\n        type: \"ACCOUNT_LOADED\",\n        account\n    });\n    return account;\n};\nconst loadNetwork = async (provider, dispatch)=>{\n    let { chainId } = await provider.getNetwork();\n    chainId = Number(chainId);\n    dispatch({\n        type: \"NETWORK_LOADED\",\n        chainId\n    });\n    return chainId;\n};\nconst subscribeToEvents = async function(restaurantFactory, dispatch) {\n    for(var _len = arguments.length, Restaurants = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        Restaurants[_key - 2] = arguments[_key];\n    }\n    restaurantFactory.on(\"RestaurantCreated\", (restaurant1, id, owner, event)=>{\n        const _restaurant = event.args;\n        dispatch({\n            type: \"NEW_RESTAURANT_CREATION_SUCCESS\",\n            _restaurant,\n            event\n        });\n    });\n    for(restaurant in Restaurants){\n        restaurant.on(\"JobAdded\", (id, timestamp, job, event)=>{});\n    }\n};\nconst loadFactory = async (provider, address, dispatch)=>{\n    const user = await provider.getSigner();\n    const decentratalityServiceFactory = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(address, _abis_decentratalityServiceFactory_json__WEBPACK_IMPORTED_MODULE_1__.abi, user);\n    dispatch({\n        type: \"DECENTRATALITY_SERVICE_FACTORY_LOADED\",\n        decentratalityServiceFactory\n    });\n    return decentratalityServiceFactory;\n};\nconst loadAllRestaurants = async (provider, factory, dispatch)=>{\n    try {\n        const Restaurants = [];\n        const user = await provider.getSigner();\n        // Call the `getAllRestaurants` function from the factory contract\n        const restaurantAddresses = await factory.getAllRestaurants();\n        // Iterate through the returned restaurant addresses\n        for(let i = 0; i < restaurantAddresses.length; i++){\n            const restaurantAddress = restaurantAddresses[i];\n            // Create a new contract instance for the restaurant\n            const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurantAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, user);\n            // Fetch restaurant details\n            const name = await restaurantContract.name();\n            const owner = await restaurantContract.owner();\n            const balance = await provider.getBalance(restaurantAddress);\n            // Format the restaurant data\n            Restaurants.push({\n                id: i + 1,\n                address: restaurantAddress,\n                name,\n                owner,\n                balance: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(balance))\n            });\n        }\n        // Update global state or Redux store\n        dispatch({\n            type: \"ALL_RESTAURANTS_LOADED\",\n            Restaurants\n        });\n        return Restaurants;\n    } catch (error) {\n        console.error(\"Error loading all restaurants:\", error);\n        return [];\n    }\n};\nconst loadMyRestaurants = async (provider, user, Restaurants, dispatch)=>{\n    const myRestaurants = Restaurants.filter((restaurant1)=>restaurant1.owner === user); // Assuming `owner` is the correct key\n    if (myRestaurants.length === 0) return;\n    dispatch({\n        type: \"MY_RESTAURANTS_LOADED\",\n        myRestaurants\n    });\n    return myRestaurants;\n};\nconst decorateMyRestaurants = async (provider, myRestaurants)=>{\n    const user = provider.getSigner();\n    const decoratedRestaurants = [];\n    if (myRestaurants) {\n        for (const restaurant1 of myRestaurants){\n            try {\n                const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurant1.address, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, user);\n                const name = await contract.name; // Use the new getName() function\n                const myName = name.toString();\n                const cash = Number(await provider.getBalance(restaurant1.address));\n                decoratedRestaurants.push({\n                    ...restaurant1,\n                    myName,\n                    cash\n                });\n            } catch (error) {\n                console.error(\"Error decorating restaurant \".concat(restaurant1.address, \":\"), error);\n            }\n        }\n    }\n    return decoratedRestaurants;\n};\nconst createNewRestaurant = async (provider, factory, restaurantName, totalCostWei, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        // Ensure totalCostWei is converted to an integer BigInt by truncating decimals\n        const totalCost = BigInt(Math.floor(Number(totalCostWei)));\n        // Check if the user has enough balance\n        const balance = await provider.getBalance(user.getAddress());\n        if (BigInt(balance) < totalCost) {\n            alert(\"Insufficient funds to create restaurant\");\n            return;\n        }\n        // Call the contract function with the converted total cost\n        const tx = await factory.createRestaurant(restaurantName, totalCost, {\n            value: totalCost\n        });\n        // Wait for the transaction to be mined\n        await tx.wait();\n        // Dispatch success action\n        dispatch({\n            type: \"RESTAURANT_CREATION_SUCCESS\",\n            restaurant: tx\n        });\n    } catch (error) {\n        console.error(\"Error creating restaurant:\", error);\n        dispatch({\n            type: \"RESTAURANT_CREATION_FAIL\",\n            error\n        });\n    }\n};\nconst loadDashboardRestaurantContractData = async (provider, Restaurant, dispatch)=>{\n    const user = await provider.getSigner();\n    const contractAddress = Restaurant.address;\n    const abi = _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__;\n    const contract = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n    const name = await contract.name();\n    const myCash = await provider.getBalance(contractAddress);\n    const cash = Number(myCash).toString();\n    dispatch({\n        type: \"DASHBOARD_RESTAURANT_LOADED\",\n        contractAddress,\n        abi,\n        name,\n        cash\n    });\n    return contract;\n};\n// interactions.js\nconst createNewJob = async (provider, contractAddress, abi, name, wage, dispatch)=>{\n    const user = await provider.getSigner();\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n    // Call the contract function to add a new job\n    const tx = await contract.addJob(wage, name);\n    // Wait for the transaction to be mined\n    await tx.wait();\n    // Reload all jobs\n    await loadAllJobs(provider, contractAddress, abi, dispatch);\n};\nconst hireNewEmployee = async (provider, contractAddress, abi, jobId, name, employeeAddress, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Call the contract function to hire a new employee\n        const tx = await contract.hireEmployee(jobId, name, employeeAddress);\n        // Wait for the transaction to be mined\n        await tx.wait();\n        // Reload all employees\n        await loadAllEmployees(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error in hireNewEmployee:\", error);\n    }\n};\nconst loadAllEmployees = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of employee IDs\n        const employeeIds = await contract.getEmployeeIds();\n        const employeesArray = [];\n        for(let i = 0; i < employeeIds.length; i++){\n            const employeeId = Number(employeeIds[i]); // Convert BigNumber to Number\n            const employee = await contract.employees(employeeId);\n            employeesArray.push({\n                id: employeeId.toString(),\n                jobId: employee.jobId.toString(),\n                name: employee.name,\n                address: employee.employeeAddress,\n                clockStamp: employee.clockStamp.toString(),\n                employeePension: employee.employeePension.toString()\n            });\n        }\n        // Dispatch action to update employees in Redux store\n        dispatch({\n            type: \"EMPLOYEES_LOADED\",\n            employees: employeesArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllEmployees:\", error);\n    }\n};\nconst loadAllJobs = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of job IDs\n        const jobIds = await contract.getJobIds();\n        const jobsArray = [];\n        for(let i = 0; i < jobIds.length; i++){\n            const jobId = Number(jobIds[i]); // Convert BigNumber to Number\n            const job = await contract.jobs(jobId);\n            jobsArray.push({\n                id: jobId.toString(),\n                hourlyWageInWei: job.hourlyWageInWei.toString(),\n                jobName: job.jobName\n            });\n        }\n        // Dispatch action to update jobs in Redux store\n        dispatch({\n            type: \"JOBS_LOADED\",\n            jobs: jobsArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllJobs:\", error.message);\n    }\n};\nconst startService = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        const tx = await contract.startService();\n        const receipt = await tx.wait();\n        // Get the block timestamp from the transaction receipt\n        const block = await provider.getBlock(receipt.blockNumber);\n        const serviceStartTime = block.timestamp;\n        // Dispatch the service start time\n        dispatch({\n            type: \"SERVICE_STARTED\",\n            serviceStartTime\n        });\n    } catch (error) {\n        console.error(\"Error in startService:\", error);\n    }\n};\nconst loadAllServices = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of service IDs\n        const serviceIds = await contract.getServiceIds();\n        const servicesArray = [];\n        for(let i = 0; i < serviceIds.length; i++){\n            const serviceId = Number(serviceIds[i]);\n            const service = await contract.services(serviceId);\n            servicesArray.push({\n                id: serviceId.toString(),\n                startTime: service.startTime.toString(),\n                endTime: service.endTime.toString(),\n                cost: service.cost.toString(),\n                profit: service.profit.toString(),\n                revenue: service.revenue.toString()\n            });\n        }\n        // Dispatch action to update services in Redux store\n        dispatch({\n            type: \"SERVICES_LOADED\",\n            services: servicesArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllServices:\", error);\n    }\n};\nconst endService = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const user = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        const tx = await contract.endService();\n        await tx.wait();\n        // Optionally dispatch an action to update the service status in Redux\n        dispatch({\n            type: \"SERVICE_STOPPED\"\n        });\n    } catch (error) {\n        console.error(\"Error in endService:\", error);\n    }\n};\nconst createPOS = async (provider, contractAddress, abi, name, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, signer);\n        // Call the createPOS function on the contract\n        const tx = await contract.createPOS(name);\n        const receipt = await tx.wait();\n        // Extract the POSCreated event from the receipt\n        const event = receipt.logs.map((log)=>{\n            try {\n                return contract.interface.parseLog(log);\n            } catch (e) {\n                return null;\n            }\n        }).find((parsedLog)=>parsedLog && parsedLog.name === \"POSCreated\");\n        if (event) {\n            const posId = event.args.id.toString();\n            const posAddress = event.args.pos;\n        // Dispatch action to update Redux store\n        }\n        // Reload POS list\n        await loadAllPOS(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error in createPOS:\", error);\n    }\n};\nconst loadAllPOS = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n        // Fetch the array of POS IDs\n        const posIds = await contract.getPOSIds();\n        const posArray = [];\n        for(let i = 0; i < posIds.length; i++){\n            const posId = Number(posIds[i]);\n            const posAddress = await contract.POSMapping(posId);\n            const posContract = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            const posName = await posContract.getName();\n            posArray.push({\n                id: posId.toString(),\n                address: posAddress,\n                name: posName.toString()\n            });\n        }\n        // Dispatch action to update POS in Redux store\n        dispatch({\n            type: \"POS_LOADED\",\n            posArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllPOS:\", error);\n    }\n};\nconst loadAllMenuItems = async (provider, contractAddress, abi, dispatch)=>{\n    try {\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, provider);\n        console.log(\"hello\");\n        // Get all POS addresses associated with the restaurant\n        const posAddresses = await restaurantContract.getAllPOSAddresses();\n        if (posAddresses.length === 0) {\n            dispatch({\n                type: \"LOAD_ALL_MENU_ITEMS_SUCCESS\",\n                payload: []\n            });\n            return;\n        }\n        const firstPOSAddress = posAddresses[0];\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(firstPOSAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, provider);\n        const menuItemIds = await posContract.getMenuItemIds();\n        let menuItems = [];\n        for(let i = 0; i < menuItemIds.length; i++){\n            const id = Number(menuItemIds[i]);\n            const menuItem = await posContract.menu(id);\n            menuItems.push({\n                id: id,\n                cost: ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(menuItem.cost),\n                name: menuItem.name\n            });\n        }\n        dispatch({\n            type: \"LOAD_ALL_MENU_ITEMS_SUCCESS\",\n            payload: menuItems\n        });\n    } catch (error) {\n        console.error(\"Error loading menu items:\", error);\n    }\n};\nconst addNewMenuItem = async (provider, contractAddress, abi, cost, name, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, provider);\n        // Get all POS addresses from the restaurant contract\n        const posAddresses = await restaurantContract.getAllPOSAddresses();\n        // Loop through each POS address and add the menu item\n        for(let i = 0; i < posAddresses.length; i++){\n            const posAddress = posAddresses[i];\n            // Create a new contract instance for each POS\n            const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            // Call the addMenuItem function on each POS contract\n            const costInWei = ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.parseUnits(cost.toString(), \"ether\");\n            const tx = await posContract.addMenuItem(costInWei, name);\n            await tx.wait();\n        }\n        dispatch({\n            type: \"MENU_ITEM_ADDED\",\n            payload: {\n                cost,\n                name\n            }\n        });\n        await loadAllMenuItems(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error adding new menu item:\", error);\n    }\n};\n// In interactions.js (near loadAllPOS or after it):\nconst loadEmployeeRelevantPOS = async (provider, restaurantAddress, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurantAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n        const posIds = await restaurantContract.getPOSIds();\n        const posArray = [];\n        for(let i = 0; i < posIds.length; i++){\n            const posId = Number(posIds[i]);\n            const posAddress = await restaurantContract.POSMapping(posId);\n            const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            const posName = await posContract.getName();\n            posArray.push({\n                id: posId.toString(),\n                address: posAddress,\n                name: posName.toString()\n            });\n            console.log(\"1\");\n        }\n        console.log(posArray);\n        // Dispatch an action that specifically stores POS addresses relevant to the current employee's restaurant\n        dispatch({\n            type: \"RELEVANT_POS_LOADED_FOR_EMPLOYEE\",\n            payload: posArray\n        });\n        return posArray;\n    } catch (error) {\n        console.error(\"Error in loadEmployeeRelevantPOS:\", error);\n    }\n};\nconst createTicketForPOS = async (provider, posAddress, posAbi, ticketName, serverAddress, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, posAbi, signer);\n        // The POS contract extends MenuTicketBase, which has createTicket(_server, _name)\n        const tx = await posContract.createTicket(serverAddress, ticketName);\n        await tx.wait();\n        // After creation, reload tickets so the UI remains up-to-date\n        await loadAllTicketsForPOS(provider, posAddress, posAbi, dispatch);\n        dispatch({\n            type: \"CREATE_TICKET_SUCCESS\"\n        });\n    } catch (error) {\n        console.error(\"Error creating ticket:\", error);\n        dispatch({\n            type: \"CREATE_TICKET_FAIL\",\n            error\n        });\n    }\n};\n/**\r\n * Loads all tickets from a given POS contract.\r\n * @param provider Ethers provider/signer\r\n * @param posAddress The POS contract address\r\n * @param posAbi The ABI for the POS contract\r\n * @param dispatch Redux dispatch function\r\n */ const loadAllTicketsForPOS = async (provider, posAddress, posAbi, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        // The POS contract (via MenuTicketBase) has an array TicketIds, so we read that\n        const ticketIds = await posContract.getTicketIds();\n        const ticketsArray = [];\n        for(let i = 0; i < ticketIds.length; i++){\n            const ticketIdBN = ticketIds[i]; // BigInt\n            const ticketId = Number(ticketIdBN);\n            const ticketStruct = await posContract.getTicket(ticketId);\n            // ticketStruct has { name, orders[], server, id, paid }\n            ticketsArray.push({\n                id: ticketStruct.id.toString(),\n                name: ticketStruct.name,\n                server: ticketStruct.server,\n                paid: ticketStruct.paid,\n                posAddress: posAddress // So we know which POS this ticket belongs to\n            });\n        }\n        // Dispatch to store in Redux. \n        // We can store them POS-by-POS or in a single array. \n        // Below, we just push them all into a single array in Redux:\n        dispatch({\n            type: \"TICKETS_LOADED\",\n            payload: {\n                posAddress,\n                tickets: ticketsArray\n            }\n        });\n    } catch (error) {\n        console.error(\"Error loading tickets for POS:\", error);\n        dispatch({\n            type: \"TICKETS_LOAD_FAIL\",\n            error\n        });\n    }\n};\nconst setActiveTicket = async (dispatch, ticket)=>{\n    dispatch({\n        type: \"ACTIVE_TICKET_SET\",\n        payload: ticket\n    });\n};\n/**\r\n * Clears the currently active ticket in Redux.\r\n * @param {Object} dispatch Redux dispatch\r\n */ const clearActiveTicket = async (dispatch)=>{\n    dispatch({\n        type: \"ACTIVE_TICKET_CLEAR\"\n    });\n};\n/**\r\n * Loads all menu items for a given POS contract address and returns them as an array.\r\n * Optionally, you could dispatch a Redux action to store them if desired.\r\n *\r\n * @param {*} provider Ethers provider/signer\r\n * @param {String} posAddress The address of the POS\r\n * @param {Array} posAbi The ABI for the POS contract\r\n * @param {Object} dispatch Redux dispatch\r\n * @returns {Array} An array of menu items [{ id, name, cost }, ...]\r\n */ const loadMenuItemsForPOS = async (provider, posAddress, posAbi, dispatch)=>{\n    try {\n        // Optional: dispatch({ type: 'MENU_ITEMS_LOAD_REQUEST' });\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        const menuItemIds = await posContract.getMenuItemIds();\n        let menuItems = [];\n        for(let i = 0; i < menuItemIds.length; i++){\n            const id = Number(menuItemIds[i]);\n            const item = await posContract.menu(id);\n            // Convert cost from wei to Ether (or you can store raw wei).\n            menuItems.push({\n                id,\n                name: item.name,\n                cost: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(item.cost))\n            });\n        }\n        // Optional: dispatch({ type: 'MENU_ITEMS_FOR_POS_LOADED', payload: menuItems });\n        return menuItems;\n    } catch (error) {\n        console.error(\"Error loading menu for POS:\", error);\n        // Optional: dispatch({ type: 'MENU_ITEMS_LOAD_FAIL', error });\n        return [];\n    }\n};\nconst addTicketOrders = async (provider, posAddress, posAbi, ticketId, items, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        const tx = await posContract.addTicketOrders(ticketId, items);\n        await tx.wait();\n        // Optionally reload the updated ticket...\n        // await loadAllTicketsForPOS(provider, posAddress, posAbi, dispatch);\n        dispatch({\n            type: \"ADD_TICKET_ORDERS_SUCCESS\"\n        });\n    } catch (error) {\n        console.error(\"Error adding orders:\", error);\n        dispatch({\n            type: \"ADD_TICKET_ORDERS_FAIL\",\n            error\n        });\n    }\n};\nconst loadFullTicketDetails = async (provider, posAddress, posAbi, ticketId, dispatch)=>{\n    try {\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        // Grab the entire ticket struct from the contract\n        const ticketStruct = await posContract.getTicket(ticketId);\n        // ticketStruct -> { name, orders[], server, id, paid }\n        // Convert orders[] from contract (cost in wei) to a friendlier JS array\n        const orders = [];\n        for(let i = 0; i < ticketStruct.orders.length; i++){\n            const orderItem = ticketStruct.orders[i];\n            orders.push({\n                name: orderItem.name,\n                cost: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(orderItem.cost))\n            });\n        }\n        const fullTicket = {\n            id: Number(ticketStruct.id).toString(),\n            name: ticketStruct.name,\n            server: ticketStruct.server,\n            paid: ticketStruct.paid,\n            posAddress,\n            orders\n        };\n        // Dispatch so Redux knows about the fully detailed ticket\n        dispatch({\n            type: \"ACTIVE_TICKET_DETAILS_LOADED\",\n            payload: fullTicket\n        });\n    } catch (error) {\n        console.error(\"Error loading full ticket details:\", error);\n        dispatch({\n            type: \"ACTIVE_TICKET_DETAILS_FAIL\",\n            error\n        });\n    }\n};\nconst bufferItemForTicket = (ticketId, item)=>{\n    return (dispatch)=>{\n        dispatch({\n            type: \"ADD_ITEM_TO_PENDING_BUFFER\",\n            payload: {\n                ticketId,\n                item\n            }\n        });\n    };\n};\n// 2) A function that *rings* all buffered items for a given ticketId\n//    by calling `addTicketOrders` in the POS contract.\nconst ringBufferedItems = async (provider, posAddress, pendingOrderBuffer, posAbi, ticketId, dispatch, getState)=>{\n    try {\n        const stringId = ticketId.toString();\n        // Get the entire pending buffer\n        const itemsToRing = pendingOrderBuffer[stringId] || [];\n        if (itemsToRing.length === 0) {\n            console.log(\"No items to ring for this ticket.\");\n            return;\n        }\n        // Format them for the contract\n        const rungItems = itemsToRing.map((item)=>({\n                cost: ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.parseUnits(item.cost.toString(), \"ether\"),\n                name: item.name\n            }));\n        const signer = await provider.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, posAbi, signer);\n        // Send transaction\n        console.log(\"fun\");\n        const tx = await posContract.addTicketOrders(ticketId, rungItems);\n        await tx.wait();\n        console.log(\"fun\");\n        // Now tell Redux we succeeded\n        dispatch({\n            type: \"ORDER_RING_SUCCESS\",\n            payload: {\n                ticketId: ticketId,\n                rungItems: itemsToRing\n            }\n        });\n        console.log(\"Successfully rang items for ticket: \".concat(stringId));\n    } catch (error) {\n        console.error(\"Error in ringBufferedItems:\", error);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/store/interactions.js\n"));

/***/ })

});