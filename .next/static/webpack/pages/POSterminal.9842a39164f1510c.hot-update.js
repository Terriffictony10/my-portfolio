"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/POSterminal",{

/***/ "./src/store/interactions.js":
/*!***********************************!*\
  !*** ./src/store/interactions.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNewMenuItem: function() { return /* binding */ addNewMenuItem; },\n/* harmony export */   addTicketOrders: function() { return /* binding */ addTicketOrders; },\n/* harmony export */   bufferItemForTicket: function() { return /* binding */ bufferItemForTicket; },\n/* harmony export */   clearActiveTicket: function() { return /* binding */ clearActiveTicket; },\n/* harmony export */   clockInEmployee: function() { return /* binding */ clockInEmployee; },\n/* harmony export */   clockOutEmployee: function() { return /* binding */ clockOutEmployee; },\n/* harmony export */   createNewJob: function() { return /* binding */ createNewJob; },\n/* harmony export */   createNewRestaurant: function() { return /* binding */ createNewRestaurant; },\n/* harmony export */   createPOS: function() { return /* binding */ createPOS; },\n/* harmony export */   createTicketForPOS: function() { return /* binding */ createTicketForPOS; },\n/* harmony export */   decorateMyRestaurants: function() { return /* binding */ decorateMyRestaurants; },\n/* harmony export */   endService: function() { return /* binding */ endService; },\n/* harmony export */   fetchEmployeeStatusFromServer: function() { return /* binding */ fetchEmployeeStatusFromServer; },\n/* harmony export */   hireNewEmployee: function() { return /* binding */ hireNewEmployee; },\n/* harmony export */   loadAccount: function() { return /* binding */ loadAccount; },\n/* harmony export */   loadAllEmployees: function() { return /* binding */ loadAllEmployees; },\n/* harmony export */   loadAllJobs: function() { return /* binding */ loadAllJobs; },\n/* harmony export */   loadAllMenuItems: function() { return /* binding */ loadAllMenuItems; },\n/* harmony export */   loadAllPOS: function() { return /* binding */ loadAllPOS; },\n/* harmony export */   loadAllRestaurants: function() { return /* binding */ loadAllRestaurants; },\n/* harmony export */   loadAllServices: function() { return /* binding */ loadAllServices; },\n/* harmony export */   loadAllTicketsForPOS: function() { return /* binding */ loadAllTicketsForPOS; },\n/* harmony export */   loadDashboardRestaurantContractData: function() { return /* binding */ loadDashboardRestaurantContractData; },\n/* harmony export */   loadEmployeeRelevantPOS: function() { return /* binding */ loadEmployeeRelevantPOS; },\n/* harmony export */   loadFactory: function() { return /* binding */ loadFactory; },\n/* harmony export */   loadFullTicketDetails: function() { return /* binding */ loadFullTicketDetails; },\n/* harmony export */   loadMenuItemsForPOS: function() { return /* binding */ loadMenuItemsForPOS; },\n/* harmony export */   loadMyRestaurants: function() { return /* binding */ loadMyRestaurants; },\n/* harmony export */   loadNetwork: function() { return /* binding */ loadNetwork; },\n/* harmony export */   loadProvider: function() { return /* binding */ loadProvider; },\n/* harmony export */   ringBufferedItems: function() { return /* binding */ ringBufferedItems; },\n/* harmony export */   setActiveTicket: function() { return /* binding */ setActiveTicket; },\n/* harmony export */   startService: function() { return /* binding */ startService; },\n/* harmony export */   subscribeToEvents: function() { return /* binding */ subscribeToEvents; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abis/Restaurant.json */ \"./src/abis/Restaurant.json\");\n/* harmony import */ var _abis_decentratalityServiceFactory_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abis/decentratalityServiceFactory.json */ \"./src/abis/decentratalityServiceFactory.json\");\n/* harmony import */ var _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abis/POS.json */ \"./src/abis/POS.json\");\n// src/store/interactions.js\n\n\n\n\n\nlet GlobalRestaurants = [];\nconst loadProvider = async (dispatch)=>{\n    const connection = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.BrowserProvider(window.ethereum);\n    dispatch({\n        type: \"PROVIDER_LOADED\",\n        connection\n    });\n    return connection;\n};\nconst loadAccount = async (provider1, dispatch)=>{\n    const accounts = await provider1.send(\"eth_requestAccounts\", []);\n    const account = ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.getAddress(accounts[0]);\n    dispatch({\n        type: \"ACCOUNT_LOADED\",\n        account\n    });\n    return account;\n};\nconst loadNetwork = async (provider1, dispatch)=>{\n    let { chainId } = await provider1.getNetwork();\n    chainId = Number(chainId);\n    dispatch({\n        type: \"NETWORK_LOADED\",\n        chainId\n    });\n    return chainId;\n};\nconst subscribeToEvents = async function(restaurantFactory, dispatch) {\n    for(var _len = arguments.length, Restaurants = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        Restaurants[_key - 2] = arguments[_key];\n    }\n    restaurantFactory.on(\"RestaurantCreated\", (restaurant1, id, owner, event)=>{\n        const _restaurant = event.args;\n        dispatch({\n            type: \"NEW_RESTAURANT_CREATION_SUCCESS\",\n            _restaurant,\n            event\n        });\n    });\n    for(restaurant in Restaurants){\n        restaurant.on(\"JobAdded\", (id, timestamp, job, event)=>{});\n    }\n};\nconst loadFactory = async (user, address1, dispatch)=>{\n    const { provider: provider1, address } = await user;\n    const decentratalityServiceFactory = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(address1, _abis_decentratalityServiceFactory_json__WEBPACK_IMPORTED_MODULE_1__.abi, await provider1.getSigner());\n    dispatch({\n        type: \"DECENTRATALITY_SERVICE_FACTORY_LOADED\",\n        decentratalityServiceFactory\n    });\n    return decentratalityServiceFactory;\n};\nconst loadAllRestaurants = async (user, factory, dispatch)=>{\n    const { provider: provider1, address } = await user;\n    const Restaurants = [];\n    // Call the `getAllRestaurants` function from the factory contract\n    const restaurantAddresses = await factory.getAllRestaurants();\n    // Iterate through the returned restaurant addresses\n    for(let i = 0; i < restaurantAddresses.length; i++){\n        const restaurantAddress = restaurantAddresses[i];\n        // Create a new contract instance for the restaurant\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurantAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, user);\n        // Fetch restaurant details\n        const name = await restaurantContract.name();\n        const owner = await restaurantContract.owner();\n        const balance = await provider1.getBalance(restaurantAddress);\n        // Format the restaurant data\n        Restaurants.push({\n            id: i + 1,\n            address: restaurantAddress,\n            name,\n            owner,\n            balance: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(balance))\n        });\n    }\n    // Update global state or Redux store\n    console.log(Restaurants);\n    dispatch({\n        type: \"ALL_RESTAURANTS_LOADED\",\n        Restaurants\n    });\n    return Restaurants;\n};\nconst loadMyRestaurants = async (provider1, user, Restaurants, dispatch)=>{\n    const myRestaurants = Restaurants.filter((restaurant1)=>restaurant1.owner === user);\n    // Assuming `owner` is the correct key\n    if (myRestaurants.length === 0) return;\n    dispatch({\n        type: \"MY_RESTAURANTS_LOADED\",\n        myRestaurants\n    });\n    return myRestaurants;\n};\nconst decorateMyRestaurants = async (user, myRestaurants)=>{\n    const decoratedRestaurants = [];\n    if (myRestaurants) {\n        for (const restaurant1 of myRestaurants){\n            try {\n                const { provider: provider1, address } = await user;\n                const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurant1.address, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, user);\n                const name = await contract.name; // Use the new getName() function\n                const myName = name.toString();\n                const cash = Number(await provider1.getBalance(restaurant1.address));\n                decoratedRestaurants.push({\n                    ...restaurant1,\n                    myName,\n                    cash\n                });\n            } catch (error) {\n                console.error(\"Error decorating restaurant \".concat(restaurant1.address, \":\"), error);\n            }\n        }\n    }\n    return decoratedRestaurants;\n};\nconst createNewRestaurant = async (user, factory, restaurantName, totalCostWei, dispatch)=>{\n    try {\n        const { provider: provider1, address } = await user;\n        console.log(factory);\n        // Ensure totalCostWei is converted to an integer BigInt by truncating decimals\n        const totalCost = BigInt(Math.floor(Number(totalCostWei)));\n        // Check if the user has enough balance\n        const balance = await provider1.getBalance(address);\n        if (BigInt(balance) < totalCost) {\n            alert(\"Insufficient funds to create restaurant\");\n            return;\n        }\n        // Call the contract function with the converted total cost\n        const tx = await factory.createRestaurant(restaurantName, totalCost, {\n            value: totalCost\n        });\n        // Wait for the transaction to be mined\n        await tx.wait();\n        // Dispatch success action\n        dispatch({\n            type: \"RESTAURANT_CREATION_SUCCESS\",\n            restaurant: tx\n        });\n    } catch (error) {\n        console.error(\"Error creating restaurant:\", error);\n        dispatch({\n            type: \"RESTAURANT_CREATION_FAIL\",\n            error\n        });\n    }\n};\nconst loadDashboardRestaurantContractData = async (user, Restaurant, dispatch)=>{\n    const { provider: provider1, address } = await user;\n    const contractAddress = Restaurant.address;\n    const abi = _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__;\n    const contract = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n    const name = await contract.name();\n    const myCash = await provider1.getBalance(contractAddress);\n    const cash = Number(myCash).toString();\n    dispatch({\n        type: \"DASHBOARD_RESTAURANT_LOADED\",\n        contractAddress,\n        abi,\n        name,\n        cash\n    });\n    return contract;\n};\n// interactions.js\nconst createNewJob = async (user, contractAddress, abi, name, wage, dispatch)=>{\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n    // Call the contract function to add a new job\n    const tx = await contract.addJob(wage, name);\n    // Wait for the transaction to be mined\n    await tx.wait();\n    // Reload all jobs\n    await loadAllJobs(user, contractAddress, abi, dispatch);\n};\nconst hireNewEmployee = async (user, contractAddress, abi, jobId, name, employeeAddress, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Call the contract function to hire a new employee\n        const tx = await contract.hireEmployee(jobId, name, employeeAddress);\n        // Wait for the transaction to be mined\n        await tx.wait();\n        // Reload all employees\n        await loadAllEmployees(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error in hireNewEmployee:\", error);\n    }\n};\nconst loadAllEmployees = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of employee IDs\n        const employeeIds = await contract.getEmployeeIds();\n        const employeesArray = [];\n        for(let i = 0; i < employeeIds.length; i++){\n            const employeeId = Number(employeeIds[i]); // Convert BigNumber to Number\n            const employee = await contract.employees(employeeId);\n            employeesArray.push({\n                id: employeeId.toString(),\n                jobId: employee.jobId.toString(),\n                name: employee.name,\n                address: employee.employeeAddress,\n                clockStamp: employee.clockStamp.toString(),\n                employeePension: employee.employeePension.toString()\n            });\n        }\n        // Dispatch action to update employees in Redux store\n        dispatch({\n            type: \"EMPLOYEES_LOADED\",\n            employees: employeesArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllEmployees:\", error);\n    }\n};\nconst loadAllJobs = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of job IDs\n        const jobIds = await contract.getJobIds();\n        const jobsArray = [];\n        for(let i = 0; i < jobIds.length; i++){\n            const jobId = Number(jobIds[i]); // Convert BigNumber to Number\n            const job = await contract.jobs(jobId);\n            jobsArray.push({\n                id: jobId.toString(),\n                hourlyWageInWei: job.hourlyWageInWei.toString(),\n                jobName: job.jobName\n            });\n        }\n        // Dispatch action to update jobs in Redux store\n        dispatch({\n            type: \"JOBS_LOADED\",\n            jobs: jobsArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllJobs:\", error.message);\n    }\n};\nconst startService = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        const tx = await contract.startService();\n        const receipt = await tx.wait();\n        // Get the block timestamp from the transaction receipt\n        const block = await provider.getBlock(receipt.blockNumber);\n        const serviceStartTime = block.timestamp;\n        // Dispatch the service start time\n        dispatch({\n            type: \"SERVICE_STARTED\",\n            serviceStartTime\n        });\n    } catch (error) {\n        console.error(\"Error in startService:\", error);\n    }\n};\nconst loadAllServices = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        // Fetch the array of service IDs\n        const serviceIds = await contract.getServiceIds();\n        const servicesArray = [];\n        for(let i = 0; i < serviceIds.length; i++){\n            const serviceId = Number(serviceIds[i]);\n            const service = await contract.services(serviceId);\n            servicesArray.push({\n                id: serviceId.toString(),\n                startTime: service.startTime.toString(),\n                endTime: service.endTime.toString(),\n                cost: service.cost.toString(),\n                profit: service.profit.toString(),\n                revenue: service.revenue.toString()\n            });\n        }\n        // Dispatch action to update services in Redux store\n        dispatch({\n            type: \"SERVICES_LOADED\",\n            services: servicesArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllServices:\", error);\n    }\n};\nconst endService = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, user);\n        const tx = await contract.endService();\n        await tx.wait();\n        // Optionally dispatch an action to update the service status in Redux\n        dispatch({\n            type: \"SERVICE_STOPPED\"\n        });\n    } catch (error) {\n        console.error(\"Error in endService:\", error);\n    }\n};\nconst createPOS = async (signer, contractAddress, abi, name, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, signer);\n        // Call the createPOS function on the contract\n        const tx = await contract.createPOS(name);\n        const receipt = await tx.wait();\n        // Extract the POSCreated event from the receipt\n        const event = receipt.logs.map((log)=>{\n            try {\n                return contract.interface.parseLog(log);\n            } catch (e) {\n                return null;\n            }\n        }).find((parsedLog)=>parsedLog && parsedLog.name === \"POSCreated\");\n        if (event) {\n            const posId = event.args.id.toString();\n            const posAddress = event.args.pos;\n        // Dispatch action to update Redux store\n        }\n        // Reload POS list\n        await loadAllPOS(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error in createPOS:\", error);\n    }\n};\nconst loadAllPOS = async (signer, contractAddress, abi, dispatch)=>{\n    try {\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n        // Fetch the array of POS IDs\n        const posIds = await contract.getPOSIds();\n        const posArray = [];\n        for(let i = 0; i < posIds.length; i++){\n            const posId = Number(posIds[i]);\n            const posAddress = await contract.POSMapping(posId);\n            const posContract = await new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            const posName = await posContract.getName();\n            posArray.push({\n                id: posId.toString(),\n                address: posAddress,\n                name: posName.toString()\n            });\n        }\n        // Dispatch action to update POS in Redux store\n        dispatch({\n            type: \"POS_LOADED\",\n            posArray\n        });\n    } catch (error) {\n        console.error(\"Error in loadAllPOS:\", error);\n    }\n};\nconst loadAllMenuItems = async (user, contractAddress, abi, dispatch)=>{\n    try {\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, user);\n        // Get all POS addresses associated with the restaurant\n        const posAddresses = await restaurantContract.getAllPOSAddresses();\n        if (posAddresses.length === 0) {\n            dispatch({\n                type: \"LOAD_ALL_MENU_ITEMS_SUCCESS\",\n                payload: []\n            });\n            return;\n        }\n        const firstPOSAddress = posAddresses[0];\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(firstPOSAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, user);\n        const menuItemIds = await posContract.getMenuItemIds();\n        let menuItems = [];\n        for(let i = 0; i < menuItemIds.length; i++){\n            const id = Number(menuItemIds[i]);\n            const menuItem = await posContract.menu(id);\n            menuItems.push({\n                id: id,\n                cost: ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(menuItem.cost),\n                name: menuItem.name\n            });\n        }\n        dispatch({\n            type: \"LOAD_ALL_MENU_ITEMS_SUCCESS\",\n            payload: menuItems\n        });\n    } catch (error) {\n        console.error(\"Error loading menu items:\", error);\n    }\n};\nconst addNewMenuItem = async (signer, contractAddress, abi, cost, name, dispatch)=>{\n    try {\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n        // Get all POS addresses from the restaurant contract\n        const posAddresses = await restaurantContract.getAllPOSAddresses();\n        // Loop through each POS address and add the menu item\n        for(let i = 0; i < posAddresses.length; i++){\n            const posAddress = posAddresses[i];\n            // Create a new contract instance for each POS\n            const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            // Call the addMenuItem function on each POS contract\n            const costInWei = ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.parseUnits(cost.toString(), \"ether\");\n            const tx = await posContract.addMenuItem(costInWei, name);\n            await tx.wait();\n        }\n        dispatch({\n            type: \"MENU_ITEM_ADDED\",\n            payload: {\n                cost,\n                name\n            }\n        });\n        await loadAllMenuItems(provider, contractAddress, abi, dispatch);\n    } catch (error) {\n        console.error(\"Error adding new menu item:\", error);\n    }\n};\n// In interactions.js (near loadAllPOS or after it):\nconst loadEmployeeRelevantPOS = async (signer, restaurantAddress, dispatch)=>{\n    try {\n        const restaurantContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(restaurantAddress, _abis_Restaurant_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n        const posIds = await restaurantContract.getPOSIds();\n        const posArray = [];\n        for(let i = 0; i < posIds.length; i++){\n            const posId = Number(posIds[i]);\n            const posAddress = await restaurantContract.POSMapping(posId);\n            const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n            const posName = await posContract.getName();\n            posArray.push({\n                id: posId.toString(),\n                address: posAddress,\n                name: posName.toString()\n            });\n            console.log(\"1\");\n        }\n        console.log(posArray);\n        // Dispatch an action that specifically stores POS addresses relevant to the current employee's restaurant\n        dispatch({\n            type: \"RELEVANT_POS_LOADED_FOR_EMPLOYEE\",\n            payload: posArray\n        });\n        return posArray;\n    } catch (error) {\n        console.error(\"Error in loadEmployeeRelevantPOS:\", error);\n    }\n};\nconst createTicketForPOS = async (signer, posAddress, posAbi, ticketName, serverAddress, dispatch)=>{\n    try {\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, posAbi, signer);\n        // The POS contract extends MenuTicketBase, which has createTicket(_server, _name)\n        const tx = await posContract.createTicket(serverAddress, ticketName);\n        await tx.wait();\n        // After creation, reload tickets so the UI remains up-to-date\n        await loadAllTicketsForPOS(provider, posAddress, posAbi, dispatch);\n        dispatch({\n            type: \"CREATE_TICKET_SUCCESS\"\n        });\n    } catch (error) {\n        console.error(\"Error creating ticket:\", error);\n        dispatch({\n            type: \"CREATE_TICKET_FAIL\",\n            error\n        });\n    }\n};\n/**\r\n * Loads all tickets from a given POS contract.\r\n * @param provider Ethers provider/signer\r\n * @param posAddress The POS contract address\r\n * @param posAbi The ABI for the POS contract\r\n * @param dispatch Redux dispatch function\r\n */ const loadAllTicketsForPOS = async (signer, posAddress, posAbi, dispatch)=>{\n    try {\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        // The POS contract (via MenuTicketBase) has an array TicketIds, so we read that\n        const ticketIds = await posContract.getTicketIds();\n        const ticketsArray = [];\n        for(let i = 0; i < ticketIds.length; i++){\n            const ticketIdBN = ticketIds[i]; // BigInt\n            const ticketId = Number(ticketIdBN);\n            const ticketStruct = await posContract.getTicket(ticketId);\n            // ticketStruct has { name, orders[], server, id, paid }\n            ticketsArray.push({\n                id: ticketStruct.id.toString(),\n                name: ticketStruct.name,\n                server: ticketStruct.server,\n                paid: ticketStruct.paid,\n                posAddress: posAddress // So we know which POS this ticket belongs to\n            });\n        }\n        // Dispatch to store in Redux. \n        // We can store them POS-by-POS or in a single array. \n        // Below, we just push them all into a single array in Redux:\n        dispatch({\n            type: \"TICKETS_LOADED\",\n            payload: {\n                posAddress,\n                tickets: ticketsArray\n            }\n        });\n    } catch (error) {\n        console.error(\"Error loading tickets for POS:\", error);\n        dispatch({\n            type: \"TICKETS_LOAD_FAIL\",\n            error\n        });\n    }\n};\nconst setActiveTicket = async (dispatch, ticket)=>{\n    dispatch({\n        type: \"ACTIVE_TICKET_SET\",\n        payload: ticket\n    });\n};\n/**\r\n * Clears the currently active ticket in Redux.\r\n * @param {Object} dispatch Redux dispatch\r\n */ const clearActiveTicket = async (dispatch)=>{\n    dispatch({\n        type: \"ACTIVE_TICKET_CLEAR\"\n    });\n};\n/**\r\n * Loads all menu items for a given POS contract address and returns them as an array.\r\n * Optionally, you could dispatch a Redux action to store them if desired.\r\n *\r\n * @param {*} provider Ethers provider/signer\r\n * @param {String} posAddress The address of the POS\r\n * @param {Array} posAbi The ABI for the POS contract\r\n * @param {Object} dispatch Redux dispatch\r\n * @returns {Array} An array of menu items [{ id, name, cost }, ...]\r\n */ const loadMenuItemsForPOS = async (signer, posAddress, posAbi, dispatch)=>{\n    try {\n        // Optional: dispatch({ type: 'MENU_ITEMS_LOAD_REQUEST' });\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        const menuItemIds = await posContract.getMenuItemIds();\n        let menuItems = [];\n        for(let i = 0; i < menuItemIds.length; i++){\n            const id = Number(menuItemIds[i]);\n            const item = await posContract.menu(id);\n            // Convert cost from wei to Ether (or you can store raw wei).\n            menuItems.push({\n                id,\n                name: item.name,\n                cost: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(item.cost))\n            });\n        }\n        // Optional: dispatch({ type: 'MENU_ITEMS_FOR_POS_LOADED', payload: menuItems });\n        return menuItems;\n    } catch (error) {\n        console.error(\"Error loading menu for POS:\", error);\n        // Optional: dispatch({ type: 'MENU_ITEMS_LOAD_FAIL', error });\n        return [];\n    }\n};\nconst addTicketOrders = async (provider1, posAddress, posAbi, ticketId, items, dispatch)=>{\n    try {\n        const signer = await provider1.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        const tx = await posContract.addTicketOrders(ticketId, items);\n        await tx.wait();\n        // Optionally reload the updated ticket...\n        // await loadAllTicketsForPOS(provider, posAddress, posAbi, dispatch);\n        dispatch({\n            type: \"ADD_TICKET_ORDERS_SUCCESS\"\n        });\n    } catch (error) {\n        console.error(\"Error adding orders:\", error);\n        dispatch({\n            type: \"ADD_TICKET_ORDERS_FAIL\",\n            error\n        });\n    }\n};\nconst loadFullTicketDetails = async (provider1, posAddress, posAbi, ticketId, dispatch)=>{\n    try {\n        const signer = await provider1.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, _abis_POS_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        // Grab the entire ticket struct from the contract\n        const ticketStruct = await posContract.getTicket(ticketId);\n        // ticketStruct -> { name, orders[], server, id, paid }\n        // Convert orders[] from contract (cost in wei) to a friendlier JS array\n        const orders = [];\n        for(let i = 0; i < ticketStruct.orders.length; i++){\n            const orderItem = ticketStruct.orders[i];\n            orders.push({\n                name: orderItem.name,\n                cost: Number(ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.formatEther(orderItem.cost))\n            });\n        }\n        const fullTicket = {\n            id: Number(ticketStruct.id).toString(),\n            name: ticketStruct.name,\n            server: ticketStruct.server,\n            paid: ticketStruct.paid,\n            posAddress,\n            orders\n        };\n        // Dispatch so Redux knows about the fully detailed ticket\n        dispatch({\n            type: \"ACTIVE_TICKET_DETAILS_LOADED\",\n            payload: fullTicket\n        });\n    } catch (error) {\n        console.error(\"Error loading full ticket details:\", error);\n        dispatch({\n            type: \"ACTIVE_TICKET_DETAILS_FAIL\",\n            error\n        });\n    }\n};\nconst bufferItemForTicket = (ticketId, item)=>{\n    return (dispatch)=>{\n        dispatch({\n            type: \"ADD_ITEM_TO_PENDING_BUFFER\",\n            payload: {\n                ticketId,\n                item\n            }\n        });\n    };\n};\n// 2) A function that *rings* all buffered items for a given ticketId\n//    by calling `addTicketOrders` in the POS contract.\nconst ringBufferedItems = async (provider1, posAddress, pendingOrderBuffer, posAbi, ticketId, dispatch, getState)=>{\n    try {\n        const stringId = ticketId.toString();\n        // Get the entire pending buffer\n        const itemsToRing = pendingOrderBuffer[stringId] || [];\n        if (itemsToRing.length === 0) {\n            console.log(\"No items to ring for this ticket.\");\n            return;\n        }\n        // Format them for the contract\n        const rungItems = itemsToRing.map((item)=>({\n                cost: ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.parseUnits(item.cost.toString(), \"ether\"),\n                name: item.name\n            }));\n        const signer = await provider1.getSigner();\n        const posContract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(posAddress, posAbi, signer);\n        // Send transaction\n        console.log(\"fun\");\n        const tx = await posContract.addTicketOrders(ticketId, rungItems);\n        await tx.wait();\n        console.log(\"fun\");\n        // Now tell Redux we succeeded\n        dispatch({\n            type: \"ORDER_RING_SUCCESS\",\n            payload: {\n                ticketId: ticketId,\n                rungItems: itemsToRing\n            }\n        });\n        console.log(\"Successfully rang items for ticket: \".concat(stringId));\n    } catch (error) {\n        console.error(\"Error in ringBufferedItems:\", error);\n    }\n};\nconst clockInEmployee = async (signer, contractAddress, abi, employeeId)=>{\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, signer);\n    const tx = await contract.clockIn(employeeId);\n    await tx.wait();\n};\nconst clockOutEmployee = async (signer, contractAddress, abi, employeeId)=>{\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.ethers.Contract(contractAddress, abi, signer);\n    const tx = await contract.clockOut(employeeId);\n    await tx.wait();\n};\n// In store/interactions.js\n// store/interactions.js\nconst fetchEmployeeStatusFromServer = (param)=>{\n    let { signer, contractAddress, abi, jobName } = param;\n    return async (dispatch, getState)=>{\n        try {\n            // 1) The public address of the user\n            const userAddress = await signer.getAddress();\n            // 2) Build the payload\n            const payload = {\n                contractAddress,\n                userAddress,\n                abi,\n                jobName\n            };\n            // 3) POST to your custom route\n            const response = await fetch(\"/api/employeeStatus\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            // 4) Dispatch if you want to store in Redux\n            dispatch({\n                type: \"EMPLOYEE_STATUS_FROM_SERVER\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Error in fetchEmployeeStatusFromServer:\", error);\n            dispatch({\n                type: \"EMPLOYEE_STATUS_FROM_SERVER_ERROR\",\n                error\n            });\n        }\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LDBDQUFNQSxDQUFDd0MsUUFBUSxDQUFDMEMsaUJBQWlCekMsS0FBS3VGO0lBQzNELE1BQU1wRCxLQUFLLE1BQU1iLFNBQVN1SSxRQUFRLENBQUN0RztJQUNuQyxNQUFNcEIsR0FBR0csSUFBSTtBQUNmLEVBQUU7QUFHRiwyQkFBMkI7QUFFM0Isd0JBQXdCO0FBQ2pCLE1BQU13SCxnQ0FDWDtRQUFDLEVBQUV2RSxNQUFNLEVBQUU5QyxlQUFlLEVBQUV6QyxHQUFHLEVBQUVpRSxPQUFPLEVBQUU7V0FDMUMsT0FBT25HLFVBQVV3TDtRQUNmLElBQUk7WUFDRixvQ0FBb0M7WUFDcEMsTUFBTVMsY0FBYyxNQUFNeEUsT0FBTzlHLFVBQVU7WUFFM0MsdUJBQXVCO1lBQ3ZCLE1BQU1tSSxVQUFVO2dCQUNkbkU7Z0JBQ0FzSDtnQkFDQS9KO2dCQUNBaUU7WUFDRjtZQUVBLCtCQUErQjtZQUMvQixNQUFNK0YsV0FBVyxNQUFNQyxNQUFNLHVCQUF1QjtnQkFDbERDLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQUUsZ0JBQWdCO2dCQUFtQjtnQkFDOUNDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQzFEO1lBQ3ZCO1lBRUEsSUFBSSxDQUFDb0QsU0FBU08sRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU0saUJBQXFDLE9BQXBCUixTQUFTUyxVQUFVO1lBQ3REO1lBRUEsTUFBTUMsT0FBTyxNQUFNVixTQUFTVyxJQUFJO1lBRWhDLDRDQUE0QztZQUM1QzdNLFNBQVM7Z0JBQUVLLE1BQU07Z0JBQStCeUksU0FBUzhEO1lBQUs7UUFDaEUsRUFBRSxPQUFPaEosT0FBTztZQUNkWCxRQUFRVyxLQUFLLENBQUMsMkNBQTJDQTtZQUN6RDVELFNBQVM7Z0JBQUVLLE1BQU07Z0JBQXFDdUQ7WUFBTTtRQUM5RDtJQUNGO0VBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL2ludGVyYWN0aW9ucy5qcz8wMGE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zdG9yZS9pbnRlcmFjdGlvbnMuanNcclxuXHJcbmltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycydcclxuaW1wb3J0IFJFU1RBVVJBTlRfQUJJIGZyb20gXCIuLi9hYmlzL1Jlc3RhdXJhbnQuanNvblwiXHJcbmltcG9ydCBERUNFTlRSQVRBTElUWVNFUlZJQ0VGQUNUT1JZX0FCSSBmcm9tIFwiLi4vYWJpcy9kZWNlbnRyYXRhbGl0eVNlcnZpY2VGYWN0b3J5Lmpzb25cIlxyXG5pbXBvcnQgUE9TX0FCSSBmcm9tIFwiLi4vYWJpcy9QT1MuanNvblwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5cclxubGV0IEdsb2JhbFJlc3RhdXJhbnRzID0gW11cclxuZXhwb3J0IGNvbnN0IGxvYWRQcm92aWRlciA9IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG5cdGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCBuZXcgZXRoZXJzLkJyb3dzZXJQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pO1xyXG4gICAgXHJcbiAgICBcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1BST1ZJREVSX0xPQURFRCcsIGNvbm5lY3Rpb24gfSlcclxuXHJcbiAgICByZXR1cm4gY29ubmVjdGlvblxyXG59XHJcbmV4cG9ydCBjb25zdCBsb2FkQWNjb3VudCA9IGFzeW5jIChwcm92aWRlciwgZGlzcGF0Y2gpID0+IHtcclxuXHRjb25zdCBhY2NvdW50cyA9IGF3YWl0IHByb3ZpZGVyLnNlbmQoXCJldGhfcmVxdWVzdEFjY291bnRzXCIsIFtdKTtcclxuXHRjb25zdCBhY2NvdW50ID0gZXRoZXJzLmdldEFkZHJlc3MoYWNjb3VudHNbMF0pOyBcclxuXHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdBQ0NPVU5UX0xPQURFRCcsIGFjY291bnR9KVxyXG5cclxuICAgIHJldHVybiBhY2NvdW50XHJcbn1cclxuZXhwb3J0IGNvbnN0IGxvYWROZXR3b3JrID0gYXN5bmMgKHByb3ZpZGVyLCBkaXNwYXRjaCkgPT4ge1xyXG4gICAgbGV0IHsgY2hhaW5JZCB9ID0gYXdhaXQgcHJvdmlkZXIuZ2V0TmV0d29yaygpXHJcbiAgICBjaGFpbklkID0gTnVtYmVyKGNoYWluSWQpXHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdORVRXT1JLX0xPQURFRCcsIGNoYWluSWQgfSlcclxuXHJcbiAgICByZXR1cm4gY2hhaW5JZFxyXG59XHJcbmV4cG9ydCBjb25zdCBzdWJzY3JpYmVUb0V2ZW50cyA9IGFzeW5jIChyZXN0YXVyYW50RmFjdG9yeSwgZGlzcGF0Y2gsIC4uLlJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgICAgcmVzdGF1cmFudEZhY3Rvcnkub24oJ1Jlc3RhdXJhbnRDcmVhdGVkJywgKHJlc3RhdXJhbnQsIGlkLCBvd25lciwgZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBfcmVzdGF1cmFudCA9IGV2ZW50LmFyZ3NcclxuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdORVdfUkVTVEFVUkFOVF9DUkVBVElPTl9TVUNDRVNTJywgX3Jlc3RhdXJhbnQsIGV2ZW50IH0pXHJcbiAgICB9KVxyXG4gICAgICAgIGZvcihyZXN0YXVyYW50IGluIFJlc3RhdXJhbnRzKSB7XHJcbiAgICAgICAgICAgIHJlc3RhdXJhbnQub24oJ0pvYkFkZGVkJywgKGlkLCB0aW1lc3RhbXAsIGpvYiwgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIFxyXG59XHJcbmV4cG9ydCBjb25zdCBsb2FkRmFjdG9yeSA9IGFzeW5jICh1c2VyLCBhZGRyZXNzMSwgZGlzcGF0Y2gpID0+IHtcclxuICAgICBjb25zdCB7IHByb3ZpZGVyLCBhZGRyZXNzIH0gPSBhd2FpdCB1c2VyXHJcbiAgICBjb25zdCBkZWNlbnRyYXRhbGl0eVNlcnZpY2VGYWN0b3J5ID0gbmV3IGV0aGVycy5Db250cmFjdChhZGRyZXNzMSwgREVDRU5UUkFUQUxJVFlTRVJWSUNFRkFDVE9SWV9BQkkuYWJpLCBhd2FpdCBwcm92aWRlci5nZXRTaWduZXIoKSk7XHJcbiAgICBcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0RFQ0VOVFJBVEFMSVRZX1NFUlZJQ0VfRkFDVE9SWV9MT0FERUQnLCBkZWNlbnRyYXRhbGl0eVNlcnZpY2VGYWN0b3J5IH0pXHJcbiAgICByZXR1cm4gZGVjZW50cmF0YWxpdHlTZXJ2aWNlRmFjdG9yeVxyXG59XHJcbmV4cG9ydCBjb25zdCBsb2FkQWxsUmVzdGF1cmFudHMgPSBhc3luYyAodXNlciwgZmFjdG9yeSwgZGlzcGF0Y2gpID0+IHtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHsgcHJvdmlkZXIsIGFkZHJlc3MgfSA9IGF3YWl0IHVzZXJcclxuICAgICAgICBjb25zdCBSZXN0YXVyYW50cyA9IFtdO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAvLyBDYWxsIHRoZSBgZ2V0QWxsUmVzdGF1cmFudHNgIGZ1bmN0aW9uIGZyb20gdGhlIGZhY3RvcnkgY29udHJhY3RcclxuICAgICAgICBjb25zdCByZXN0YXVyYW50QWRkcmVzc2VzID0gYXdhaXQgZmFjdG9yeS5nZXRBbGxSZXN0YXVyYW50cygpO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHJldHVybmVkIHJlc3RhdXJhbnQgYWRkcmVzc2VzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN0YXVyYW50QWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3RhdXJhbnRBZGRyZXNzID0gcmVzdGF1cmFudEFkZHJlc3Nlc1tpXTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBjb250cmFjdCBpbnN0YW5jZSBmb3IgdGhlIHJlc3RhdXJhbnRcclxuICAgICAgICAgICAgY29uc3QgcmVzdGF1cmFudENvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChcclxuICAgICAgICAgICAgICAgIHJlc3RhdXJhbnRBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgUkVTVEFVUkFOVF9BQkksXHJcbiAgICAgICAgICAgICAgICB1c2VyXHJcbiAgICAgICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gRmV0Y2ggcmVzdGF1cmFudCBkZXRhaWxzXHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhd2FpdCByZXN0YXVyYW50Q29udHJhY3QubmFtZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBvd25lciA9IGF3YWl0IHJlc3RhdXJhbnRDb250cmFjdC5vd25lcigpO1xyXG4gICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgcHJvdmlkZXIuZ2V0QmFsYW5jZShyZXN0YXVyYW50QWRkcmVzcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBGb3JtYXQgdGhlIHJlc3RhdXJhbnQgZGF0YVxyXG4gICAgICAgICAgICBSZXN0YXVyYW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBpICsgMSxcclxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlc3RhdXJhbnRBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgIG93bmVyLFxyXG4gICAgICAgICAgICAgICAgYmFsYW5jZTogTnVtYmVyKGV0aGVycy5mb3JtYXRFdGhlcihiYWxhbmNlKSksIC8vIENvbnZlcnQgYmFsYW5jZSB0byBFdGhlciBmb3IgZWFzaWVyIHJlYWRhYmlsaXR5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGdsb2JhbCBzdGF0ZSBvciBSZWR1eCBzdG9yZVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhSZXN0YXVyYW50cylcclxuXHJcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIkFMTF9SRVNUQVVSQU5UU19MT0FERURcIiwgUmVzdGF1cmFudHMgfSk7XHJcbiAgICAgICAgcmV0dXJuIFJlc3RhdXJhbnRzO1xyXG4gICAgXHJcbn07XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkTXlSZXN0YXVyYW50cyA9IGFzeW5jIChwcm92aWRlciwgdXNlciwgUmVzdGF1cmFudHMsIGRpc3BhdGNoKSA9PiB7XHJcbiAgICBjb25zdCBteVJlc3RhdXJhbnRzID0gUmVzdGF1cmFudHMuZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50Lm93bmVyID09PSB1c2VyKTsgXHJcbiAgICAvLyBBc3N1bWluZyBgb3duZXJgIGlzIHRoZSBjb3JyZWN0IGtleVxyXG4gICAgaWYgKG15UmVzdGF1cmFudHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnTVlfUkVTVEFVUkFOVFNfTE9BREVEJywgbXlSZXN0YXVyYW50cyB9KTtcclxuXHJcbiAgICByZXR1cm4gbXlSZXN0YXVyYW50cztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWNvcmF0ZU15UmVzdGF1cmFudHMgPSBhc3luYyAodXNlciwgbXlSZXN0YXVyYW50cykgPT4ge1xyXG4gICAgXHJcbiAgICBjb25zdCBkZWNvcmF0ZWRSZXN0YXVyYW50cyA9IFtdO1xyXG4gICAgXHJcbiAgICBpZiAobXlSZXN0YXVyYW50cykge1xyXG4gICAgICAgIGZvciAoY29uc3QgcmVzdGF1cmFudCBvZiBteVJlc3RhdXJhbnRzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBwcm92aWRlciwgYWRkcmVzcyB9ID0gYXdhaXQgdXNlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHJlc3RhdXJhbnQuYWRkcmVzcywgUkVTVEFVUkFOVF9BQkksIHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF3YWl0IGNvbnRyYWN0Lm5hbWU7IC8vIFVzZSB0aGUgbmV3IGdldE5hbWUoKSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbXlOYW1lID0gbmFtZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYXNoID0gTnVtYmVyKGF3YWl0IHByb3ZpZGVyLmdldEJhbGFuY2UocmVzdGF1cmFudC5hZGRyZXNzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVjb3JhdGVkUmVzdGF1cmFudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVzdGF1cmFudCxcclxuICAgICAgICAgICAgICAgICAgICBteU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzaCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZGVjb3JhdGluZyByZXN0YXVyYW50ICR7cmVzdGF1cmFudC5hZGRyZXNzfTpgLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBkZWNvcmF0ZWRSZXN0YXVyYW50cztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVOZXdSZXN0YXVyYW50ID0gYXN5bmMgKHVzZXIsIGZhY3RvcnksIHJlc3RhdXJhbnROYW1lLCB0b3RhbENvc3RXZWksIGRpc3BhdGNoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIFxyXG4gICAgY29uc3QgeyBwcm92aWRlciwgYWRkcmVzcyB9ID0gYXdhaXQgdXNlclxyXG4gICAgY29uc29sZS5sb2coIGZhY3RvcnkpXHJcbiAgICAvLyBFbnN1cmUgdG90YWxDb3N0V2VpIGlzIGNvbnZlcnRlZCB0byBhbiBpbnRlZ2VyIEJpZ0ludCBieSB0cnVuY2F0aW5nIGRlY2ltYWxzXHJcbiAgICBjb25zdCB0b3RhbENvc3QgPSBCaWdJbnQoTWF0aC5mbG9vcihOdW1iZXIodG90YWxDb3N0V2VpKSkpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIGhhcyBlbm91Z2ggYmFsYW5jZVxyXG4gICAgXHJcbiAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgcHJvdmlkZXIuZ2V0QmFsYW5jZShhZGRyZXNzKTtcclxuICAgIGlmIChCaWdJbnQoYmFsYW5jZSkgPCB0b3RhbENvc3QpIHtcclxuICAgICAgYWxlcnQoXCJJbnN1ZmZpY2llbnQgZnVuZHMgdG8gY3JlYXRlIHJlc3RhdXJhbnRcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoZSBjb250cmFjdCBmdW5jdGlvbiB3aXRoIHRoZSBjb252ZXJ0ZWQgdG90YWwgY29zdFxyXG4gICAgY29uc3QgdHggPSBhd2FpdCBmYWN0b3J5LmNyZWF0ZVJlc3RhdXJhbnQocmVzdGF1cmFudE5hbWUsIHRvdGFsQ29zdCwge1xyXG4gICAgICB2YWx1ZTogdG90YWxDb3N0LCAvLyBBdHRhY2ggdGhlIGZ1bmRzIGluIFdlaVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGJlIG1pbmVkXHJcbiAgICBhd2FpdCB0eC53YWl0KCk7XHJcblxyXG4gICAgLy8gRGlzcGF0Y2ggc3VjY2VzcyBhY3Rpb25cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogXCJSRVNUQVVSQU5UX0NSRUFUSU9OX1NVQ0NFU1NcIiwgcmVzdGF1cmFudDogdHggfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyByZXN0YXVyYW50OlwiLCBlcnJvcik7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IFwiUkVTVEFVUkFOVF9DUkVBVElPTl9GQUlMXCIsIGVycm9yIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkRGFzaGJvYXJkUmVzdGF1cmFudENvbnRyYWN0RGF0YSA9IGFzeW5jICh1c2VyLCBSZXN0YXVyYW50LCBkaXNwYXRjaCkgPT4ge1xyXG4gICAgY29uc3QgeyBwcm92aWRlciwgYWRkcmVzcyB9ID0gYXdhaXQgdXNlclxyXG4gICAgY29uc3QgY29udHJhY3RBZGRyZXNzID0gUmVzdGF1cmFudC5hZGRyZXNzXHJcbiAgICBjb25zdCBhYmkgPSBSRVNUQVVSQU5UX0FCSVxyXG4gICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCB1c2VyKVxyXG4gICAgY29uc3QgbmFtZSA9IGF3YWl0IGNvbnRyYWN0Lm5hbWUoKVxyXG4gICAgY29uc3QgbXlDYXNoID0gYXdhaXQgcHJvdmlkZXIuZ2V0QmFsYW5jZShjb250cmFjdEFkZHJlc3MpXHJcbiAgICBjb25zdCBjYXNoID0gTnVtYmVyKG15Q2FzaCkudG9TdHJpbmcoKVxyXG5cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0RBU0hCT0FSRF9SRVNUQVVSQU5UX0xPQURFRCcsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBuYW1lLCBjYXNoIH0pXHJcblxyXG4gICAgcmV0dXJuIGNvbnRyYWN0XHJcbiAgICBcclxufVxyXG4vLyBpbnRlcmFjdGlvbnMuanNcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVOZXdKb2IgPSBhc3luYyAodXNlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIG5hbWUsIHdhZ2UsIGRpc3BhdGNoKSA9PiB7XHJcbiAgXHJcbiAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCB1c2VyKTtcclxuXHJcbiAgLy8gQ2FsbCB0aGUgY29udHJhY3QgZnVuY3Rpb24gdG8gYWRkIGEgbmV3IGpvYlxyXG4gIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuYWRkSm9iKHdhZ2UsIG5hbWUpO1xyXG5cclxuICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gYmUgbWluZWRcclxuICBhd2FpdCB0eC53YWl0KCk7XHJcblxyXG4gIC8vIFJlbG9hZCBhbGwgam9ic1xyXG4gIGF3YWl0IGxvYWRBbGxKb2JzKHVzZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBkaXNwYXRjaCk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBoaXJlTmV3RW1wbG95ZWUgPSBhc3luYyAodXNlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGpvYklkLCBuYW1lLCBlbXBsb3llZUFkZHJlc3MsIGRpc3BhdGNoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIFxyXG4gICAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCB1c2VyKTtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBjb250cmFjdCBmdW5jdGlvbiB0byBoaXJlIGEgbmV3IGVtcGxveWVlXHJcbiAgICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LmhpcmVFbXBsb3llZShqb2JJZCwgbmFtZSwgZW1wbG95ZWVBZGRyZXNzKTtcclxuXHJcbiAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gYmUgbWluZWRcclxuICAgIGF3YWl0IHR4LndhaXQoKTtcclxuXHJcbiAgICAvLyBSZWxvYWQgYWxsIGVtcGxveWVlc1xyXG4gICAgYXdhaXQgbG9hZEFsbEVtcGxveWVlcyhwcm92aWRlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGRpc3BhdGNoKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gaGlyZU5ld0VtcGxveWVlOicsIGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZEFsbEVtcGxveWVlcyA9IGFzeW5jICh1c2VyLCBjb250cmFjdEFkZHJlc3MsIGFiaSwgZGlzcGF0Y2gpID0+IHtcclxuICB0cnkge1xyXG4gICAgXHJcbiAgICBjb25zdCBjb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoY29udHJhY3RBZGRyZXNzLCBhYmksIHVzZXIpO1xyXG5cclxuICAgIC8vIEZldGNoIHRoZSBhcnJheSBvZiBlbXBsb3llZSBJRHNcclxuICAgIGNvbnN0IGVtcGxveWVlSWRzID0gYXdhaXQgY29udHJhY3QuZ2V0RW1wbG95ZWVJZHMoKTtcclxuXHJcbiAgICBjb25zdCBlbXBsb3llZXNBcnJheSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbXBsb3llZUlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBlbXBsb3llZUlkID0gTnVtYmVyKGVtcGxveWVlSWRzW2ldKTsgLy8gQ29udmVydCBCaWdOdW1iZXIgdG8gTnVtYmVyXHJcbiAgICAgIGNvbnN0IGVtcGxveWVlID0gYXdhaXQgY29udHJhY3QuZW1wbG95ZWVzKGVtcGxveWVlSWQpO1xyXG5cclxuICAgICAgZW1wbG95ZWVzQXJyYXkucHVzaCh7XHJcbiAgICAgICAgaWQ6IGVtcGxveWVlSWQudG9TdHJpbmcoKSxcclxuICAgICAgICBqb2JJZDogZW1wbG95ZWUuam9iSWQudG9TdHJpbmcoKSxcclxuICAgICAgICBuYW1lOiBlbXBsb3llZS5uYW1lLFxyXG4gICAgICAgIGFkZHJlc3M6IGVtcGxveWVlLmVtcGxveWVlQWRkcmVzcyxcclxuICAgICAgICBjbG9ja1N0YW1wOiBlbXBsb3llZS5jbG9ja1N0YW1wLnRvU3RyaW5nKCksXHJcbiAgICAgICAgZW1wbG95ZWVQZW5zaW9uOiBlbXBsb3llZS5lbXBsb3llZVBlbnNpb24udG9TdHJpbmcoKSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlzcGF0Y2ggYWN0aW9uIHRvIHVwZGF0ZSBlbXBsb3llZXMgaW4gUmVkdXggc3RvcmVcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0VNUExPWUVFU19MT0FERUQnLCBlbXBsb3llZXM6IGVtcGxveWVlc0FycmF5IH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBsb2FkQWxsRW1wbG95ZWVzOicsIGVycm9yKTtcclxuICB9XHJcbn07XHJcbmV4cG9ydCBjb25zdCBsb2FkQWxsSm9icyA9IGFzeW5jICh1c2VyLCBjb250cmFjdEFkZHJlc3MsIGFiaSwgZGlzcGF0Y2gpID0+IHtcclxuICB0cnkge1xyXG4gICAgXHJcbiAgICBjb25zdCBjb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoY29udHJhY3RBZGRyZXNzLCBhYmksIHVzZXIpO1xyXG5cclxuICAgIC8vIEZldGNoIHRoZSBhcnJheSBvZiBqb2IgSURzXHJcbiAgICBjb25zdCBqb2JJZHMgPSBhd2FpdCBjb250cmFjdC5nZXRKb2JJZHMoKTtcclxuXHJcbiAgICBjb25zdCBqb2JzQXJyYXkgPSBbXTtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBqb2JJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgam9iSWQgPSBOdW1iZXIoam9iSWRzW2ldKTsgLy8gQ29udmVydCBCaWdOdW1iZXIgdG8gTnVtYmVyXHJcbiAgICAgIGNvbnN0IGpvYiA9IGF3YWl0IGNvbnRyYWN0LmpvYnMoam9iSWQpO1xyXG5cclxuICAgICAgam9ic0FycmF5LnB1c2goe1xyXG4gICAgICAgIGlkOiBqb2JJZC50b1N0cmluZygpLFxyXG4gICAgICAgIGhvdXJseVdhZ2VJbldlaTogam9iLmhvdXJseVdhZ2VJbldlaS50b1N0cmluZygpLFxyXG4gICAgICAgIGpvYk5hbWU6IGpvYi5qb2JOYW1lLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXNwYXRjaCBhY3Rpb24gdG8gdXBkYXRlIGpvYnMgaW4gUmVkdXggc3RvcmVcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0pPQlNfTE9BREVEJywgam9iczogam9ic0FycmF5IH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBsb2FkQWxsSm9iczonLCBlcnJvci5tZXNzYWdlKTtcclxuICB9XHJcbn07XHJcbmV4cG9ydCBjb25zdCBzdGFydFNlcnZpY2UgPSBhc3luYyAodXNlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGRpc3BhdGNoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIFxyXG4gICAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCB1c2VyKTtcclxuXHJcbiAgICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LnN0YXJ0U2VydmljZSgpO1xyXG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHR4LndhaXQoKTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIGJsb2NrIHRpbWVzdGFtcCBmcm9tIHRoZSB0cmFuc2FjdGlvbiByZWNlaXB0XHJcbiAgICBjb25zdCBibG9jayA9IGF3YWl0IHByb3ZpZGVyLmdldEJsb2NrKHJlY2VpcHQuYmxvY2tOdW1iZXIpO1xyXG4gICAgY29uc3Qgc2VydmljZVN0YXJ0VGltZSA9IGJsb2NrLnRpbWVzdGFtcDtcclxuXHJcbiAgICAvLyBEaXNwYXRjaCB0aGUgc2VydmljZSBzdGFydCB0aW1lXHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVJWSUNFX1NUQVJURUQnLCBzZXJ2aWNlU3RhcnRUaW1lIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzdGFydFNlcnZpY2U6JywgZXJyb3IpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkQWxsU2VydmljZXMgPSBhc3luYyAodXNlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGRpc3BhdGNoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgXHJcbiAgICBjb25zdCBjb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoY29udHJhY3RBZGRyZXNzLCBhYmksIHVzZXIpO1xyXG5cclxuICAgIC8vIEZldGNoIHRoZSBhcnJheSBvZiBzZXJ2aWNlIElEc1xyXG4gICAgY29uc3Qgc2VydmljZUlkcyA9IGF3YWl0IGNvbnRyYWN0LmdldFNlcnZpY2VJZHMoKTtcclxuXHJcbiAgICBjb25zdCBzZXJ2aWNlc0FycmF5ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZpY2VJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgc2VydmljZUlkID0gTnVtYmVyKHNlcnZpY2VJZHNbaV0pO1xyXG4gICAgICBjb25zdCBzZXJ2aWNlID0gYXdhaXQgY29udHJhY3Quc2VydmljZXMoc2VydmljZUlkKTtcclxuXHJcbiAgICAgIHNlcnZpY2VzQXJyYXkucHVzaCh7XHJcbiAgICAgICAgaWQ6IHNlcnZpY2VJZC50b1N0cmluZygpLFxyXG4gICAgICAgIHN0YXJ0VGltZTogc2VydmljZS5zdGFydFRpbWUudG9TdHJpbmcoKSxcclxuICAgICAgICBlbmRUaW1lOiBzZXJ2aWNlLmVuZFRpbWUudG9TdHJpbmcoKSxcclxuICAgICAgICBjb3N0OiBzZXJ2aWNlLmNvc3QudG9TdHJpbmcoKSxcclxuICAgICAgICBwcm9maXQ6IHNlcnZpY2UucHJvZml0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgcmV2ZW51ZTogc2VydmljZS5yZXZlbnVlLnRvU3RyaW5nKCksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERpc3BhdGNoIGFjdGlvbiB0byB1cGRhdGUgc2VydmljZXMgaW4gUmVkdXggc3RvcmVcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFUlZJQ0VTX0xPQURFRCcsIHNlcnZpY2VzOiBzZXJ2aWNlc0FycmF5IH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBsb2FkQWxsU2VydmljZXM6JywgZXJyb3IpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlbmRTZXJ2aWNlID0gYXN5bmMgKHVzZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIGFiaSwgdXNlcik7XHJcblxyXG4gICAgY29uc3QgdHggPSBhd2FpdCBjb250cmFjdC5lbmRTZXJ2aWNlKCk7XHJcbiAgICBhd2FpdCB0eC53YWl0KCk7XHJcblxyXG4gICAgLy8gT3B0aW9uYWxseSBkaXNwYXRjaCBhbiBhY3Rpb24gdG8gdXBkYXRlIHRoZSBzZXJ2aWNlIHN0YXR1cyBpbiBSZWR1eFxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VSVklDRV9TVE9QUEVEJyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gZW5kU2VydmljZTonLCBlcnJvcik7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBPUyA9IGFzeW5jIChzaWduZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBuYW1lLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIGFiaSwgc2lnbmVyKTtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBjcmVhdGVQT1MgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0XHJcbiAgICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LmNyZWF0ZVBPUyhuYW1lKTtcclxuICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0eC53YWl0KCk7XHJcblxyXG4gICAgLy8gRXh0cmFjdCB0aGUgUE9TQ3JlYXRlZCBldmVudCBmcm9tIHRoZSByZWNlaXB0XHJcbiAgICBjb25zdCBldmVudCA9IHJlY2VpcHQubG9nc1xyXG4gICAgICAubWFwKChsb2cpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgcmV0dXJuIGNvbnRyYWN0LmludGVyZmFjZS5wYXJzZUxvZyhsb2cpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuZmluZCgocGFyc2VkTG9nKSA9PiBwYXJzZWRMb2cgJiYgcGFyc2VkTG9nLm5hbWUgPT09ICdQT1NDcmVhdGVkJyk7XHJcblxyXG4gICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgIGNvbnN0IHBvc0lkID0gZXZlbnQuYXJncy5pZC50b1N0cmluZygpO1xyXG4gICAgICBjb25zdCBwb3NBZGRyZXNzID0gZXZlbnQuYXJncy5wb3M7XHJcblxyXG4gICAgICAvLyBEaXNwYXRjaCBhY3Rpb24gdG8gdXBkYXRlIFJlZHV4IHN0b3JlXHJcbiAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbG9hZCBQT1MgbGlzdFxyXG4gICAgYXdhaXQgbG9hZEFsbFBPUyhwcm92aWRlciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGRpc3BhdGNoKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gY3JlYXRlUE9TOicsIGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZEFsbFBPUyA9IGFzeW5jIChzaWduZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIFJFU1RBVVJBTlRfQUJJLCBzaWduZXIpO1xyXG5cclxuICAgIC8vIEZldGNoIHRoZSBhcnJheSBvZiBQT1MgSURzXHJcbiAgICBjb25zdCBwb3NJZHMgPSBhd2FpdCBjb250cmFjdC5nZXRQT1NJZHMoKTtcclxuXHJcbiAgICBjb25zdCBwb3NBcnJheSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgcG9zSWQgPSBOdW1iZXIocG9zSWRzW2ldKTtcclxuICAgICAgY29uc3QgcG9zQWRkcmVzcyA9IGF3YWl0IGNvbnRyYWN0LlBPU01hcHBpbmcocG9zSWQpO1xyXG4gICAgICBjb25zdCBwb3NDb250cmFjdCA9IGF3YWl0IG5ldyBldGhlcnMuQ29udHJhY3QocG9zQWRkcmVzcywgUE9TX0FCSSwgc2lnbmVyKVxyXG4gICAgICBjb25zdCBwb3NOYW1lID0gYXdhaXQgcG9zQ29udHJhY3QuZ2V0TmFtZSgpXHJcbiAgICAgIFxyXG5cclxuICAgICAgcG9zQXJyYXkucHVzaCh7XHJcbiAgICAgICAgaWQ6IHBvc0lkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgYWRkcmVzczogcG9zQWRkcmVzcyxcclxuICAgICAgICBuYW1lOiBwb3NOYW1lLnRvU3RyaW5nKClcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlzcGF0Y2ggYWN0aW9uIHRvIHVwZGF0ZSBQT1MgaW4gUmVkdXggc3RvcmVcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1BPU19MT0FERUQnLCBwb3NBcnJheSB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbG9hZEFsbFBPUzonLCBlcnJvcik7XHJcbiAgfVxyXG59O1xyXG4gIGV4cG9ydCBjb25zdCBsb2FkQWxsTWVudUl0ZW1zID0gYXN5bmMgKHVzZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3RhdXJhbnRDb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoY29udHJhY3RBZGRyZXNzLCBSRVNUQVVSQU5UX0FCSSwgdXNlcik7XHJcblxyXG4gICAgLy8gR2V0IGFsbCBQT1MgYWRkcmVzc2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVzdGF1cmFudFxyXG4gICAgY29uc3QgcG9zQWRkcmVzc2VzID0gYXdhaXQgcmVzdGF1cmFudENvbnRyYWN0LmdldEFsbFBPU0FkZHJlc3NlcygpO1xyXG4gICBcclxuICAgIGlmIChwb3NBZGRyZXNzZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0xPQURfQUxMX01FTlVfSVRFTVNfU1VDQ0VTUycsIHBheWxvYWQ6IFtdIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmlyc3RQT1NBZGRyZXNzID0gcG9zQWRkcmVzc2VzWzBdO1xyXG5cclxuICAgIGNvbnN0IHBvc0NvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChmaXJzdFBPU0FkZHJlc3MsIFBPU19BQkksIHVzZXIpO1xyXG5cclxuICAgIGNvbnN0IG1lbnVJdGVtSWRzID0gYXdhaXQgcG9zQ29udHJhY3QuZ2V0TWVudUl0ZW1JZHMoKTtcclxuICAgIGxldCBtZW51SXRlbXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbnVJdGVtSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gTnVtYmVyKG1lbnVJdGVtSWRzW2ldKTtcclxuICAgICAgY29uc3QgbWVudUl0ZW0gPSBhd2FpdCBwb3NDb250cmFjdC5tZW51KGlkKTtcclxuXHJcbiAgICAgIG1lbnVJdGVtcy5wdXNoKHtcclxuICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgY29zdDogZXRoZXJzLmZvcm1hdEV0aGVyKG1lbnVJdGVtLmNvc3QpLFxyXG4gICAgICAgIG5hbWU6IG1lbnVJdGVtLm5hbWUsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0xPQURfQUxMX01FTlVfSVRFTVNfU1VDQ0VTUycsIHBheWxvYWQ6IG1lbnVJdGVtcyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBtZW51IGl0ZW1zOicsIGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE5ld01lbnVJdGVtID0gYXN5bmMgKHNpZ25lciwgY29udHJhY3RBZGRyZXNzLCBhYmksIGNvc3QsIG5hbWUsIGRpc3BhdGNoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzdGF1cmFudENvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIFJFU1RBVVJBTlRfQUJJLCBzaWduZXIpO1xyXG5cclxuICAgIC8vIEdldCBhbGwgUE9TIGFkZHJlc3NlcyBmcm9tIHRoZSByZXN0YXVyYW50IGNvbnRyYWN0XHJcbiAgICBjb25zdCBwb3NBZGRyZXNzZXMgPSBhd2FpdCByZXN0YXVyYW50Q29udHJhY3QuZ2V0QWxsUE9TQWRkcmVzc2VzKCk7XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggUE9TIGFkZHJlc3MgYW5kIGFkZCB0aGUgbWVudSBpdGVtXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc0FkZHJlc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBwb3NBZGRyZXNzID0gcG9zQWRkcmVzc2VzW2ldO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IGNvbnRyYWN0IGluc3RhbmNlIGZvciBlYWNoIFBPU1xyXG4gICAgICBjb25zdCBwb3NDb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QocG9zQWRkcmVzcywgUE9TX0FCSSwgc2lnbmVyKTtcclxuXHJcbiAgICAgIC8vIENhbGwgdGhlIGFkZE1lbnVJdGVtIGZ1bmN0aW9uIG9uIGVhY2ggUE9TIGNvbnRyYWN0XHJcbiAgICAgIGNvbnN0IGNvc3RJbldlaSA9IGV0aGVycy5wYXJzZVVuaXRzKGNvc3QudG9TdHJpbmcoKSwgJ2V0aGVyJyk7XHJcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcG9zQ29udHJhY3QuYWRkTWVudUl0ZW0oY29zdEluV2VpLCBuYW1lKTtcclxuICAgICAgYXdhaXQgdHgud2FpdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ01FTlVfSVRFTV9BRERFRCcsIHBheWxvYWQ6IHsgY29zdCwgbmFtZSB9IH0pO1xyXG5cclxuICAgIGF3YWl0IGxvYWRBbGxNZW51SXRlbXMocHJvdmlkZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBkaXNwYXRjaCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBuZXcgbWVudSBpdGVtOicsIGVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBJbiBpbnRlcmFjdGlvbnMuanMgKG5lYXIgbG9hZEFsbFBPUyBvciBhZnRlciBpdCk6XHJcbmV4cG9ydCBjb25zdCBsb2FkRW1wbG95ZWVSZWxldmFudFBPUyA9IGFzeW5jIChzaWduZXIsIHJlc3RhdXJhbnRBZGRyZXNzLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3RhdXJhbnRDb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QocmVzdGF1cmFudEFkZHJlc3MsIFJFU1RBVVJBTlRfQUJJLCBzaWduZXIpO1xyXG4gICAgY29uc3QgcG9zSWRzID0gYXdhaXQgcmVzdGF1cmFudENvbnRyYWN0LmdldFBPU0lkcygpO1xyXG4gICAgXHJcbiAgICBjb25zdCBwb3NBcnJheSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHBvc0lkID0gTnVtYmVyKHBvc0lkc1tpXSk7XHJcbiAgICAgIGNvbnN0IHBvc0FkZHJlc3MgPSBhd2FpdCByZXN0YXVyYW50Q29udHJhY3QuUE9TTWFwcGluZyhwb3NJZCk7XHJcbiAgICAgIGNvbnN0IHBvc0NvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChwb3NBZGRyZXNzLCBQT1NfQUJJLCBzaWduZXIpO1xyXG4gICAgICBjb25zdCBwb3NOYW1lID0gYXdhaXQgcG9zQ29udHJhY3QuZ2V0TmFtZSgpO1xyXG4gICAgICBwb3NBcnJheS5wdXNoKHtcclxuICAgICAgICBpZDogcG9zSWQudG9TdHJpbmcoKSxcclxuICAgICAgICBhZGRyZXNzOiBwb3NBZGRyZXNzLFxyXG4gICAgICAgIG5hbWU6IHBvc05hbWUudG9TdHJpbmcoKVxyXG4gICAgICB9KTtcclxuICAgICAgY29uc29sZS5sb2coJzEnKVxyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cocG9zQXJyYXkpXHJcblxyXG4gICAgLy8gRGlzcGF0Y2ggYW4gYWN0aW9uIHRoYXQgc3BlY2lmaWNhbGx5IHN0b3JlcyBQT1MgYWRkcmVzc2VzIHJlbGV2YW50IHRvIHRoZSBjdXJyZW50IGVtcGxveWVlJ3MgcmVzdGF1cmFudFxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnUkVMRVZBTlRfUE9TX0xPQURFRF9GT1JfRU1QTE9ZRUUnLCBwYXlsb2FkOiBwb3NBcnJheSB9KTtcclxuICAgIHJldHVybiBwb3NBcnJheTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbG9hZEVtcGxveWVlUmVsZXZhbnRQT1M6JywgZXJyb3IpO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVGlja2V0Rm9yUE9TID0gYXN5bmMgKFxyXG4gIHNpZ25lcixcclxuICBwb3NBZGRyZXNzLFxyXG4gIHBvc0FiaSxcclxuICB0aWNrZXROYW1lLFxyXG4gIHNlcnZlckFkZHJlc3MsXHJcbiAgZGlzcGF0Y2hcclxuKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIFxyXG4gICAgY29uc3QgcG9zQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHBvc0FkZHJlc3MsIHBvc0FiaSwgc2lnbmVyKTtcclxuXHJcbiAgICAvLyBUaGUgUE9TIGNvbnRyYWN0IGV4dGVuZHMgTWVudVRpY2tldEJhc2UsIHdoaWNoIGhhcyBjcmVhdGVUaWNrZXQoX3NlcnZlciwgX25hbWUpXHJcbiAgICBjb25zdCB0eCA9IGF3YWl0IHBvc0NvbnRyYWN0LmNyZWF0ZVRpY2tldChzZXJ2ZXJBZGRyZXNzLCB0aWNrZXROYW1lKTtcclxuICAgIGF3YWl0IHR4LndhaXQoKTtcclxuXHJcbiAgICAvLyBBZnRlciBjcmVhdGlvbiwgcmVsb2FkIHRpY2tldHMgc28gdGhlIFVJIHJlbWFpbnMgdXAtdG8tZGF0ZVxyXG4gICAgYXdhaXQgbG9hZEFsbFRpY2tldHNGb3JQT1MocHJvdmlkZXIsIHBvc0FkZHJlc3MsIHBvc0FiaSwgZGlzcGF0Y2gpO1xyXG5cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0NSRUFURV9USUNLRVRfU1VDQ0VTUycgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHRpY2tldDonLCBlcnJvcik7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdDUkVBVEVfVElDS0VUX0ZBSUwnLCBlcnJvciB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogTG9hZHMgYWxsIHRpY2tldHMgZnJvbSBhIGdpdmVuIFBPUyBjb250cmFjdC5cclxuICogQHBhcmFtIHByb3ZpZGVyIEV0aGVycyBwcm92aWRlci9zaWduZXJcclxuICogQHBhcmFtIHBvc0FkZHJlc3MgVGhlIFBPUyBjb250cmFjdCBhZGRyZXNzXHJcbiAqIEBwYXJhbSBwb3NBYmkgVGhlIEFCSSBmb3IgdGhlIFBPUyBjb250cmFjdFxyXG4gKiBAcGFyYW0gZGlzcGF0Y2ggUmVkdXggZGlzcGF0Y2ggZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBsb2FkQWxsVGlja2V0c0ZvclBPUyA9IGFzeW5jIChzaWduZXIsIHBvc0FkZHJlc3MsIHBvc0FiaSwgZGlzcGF0Y2gpID0+IHtcclxuICB0cnkge1xyXG4gICAgXHJcbiAgICBjb25zdCBwb3NDb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QocG9zQWRkcmVzcywgUE9TX0FCSSwgc2lnbmVyKTtcclxuICAgIC8vIFRoZSBQT1MgY29udHJhY3QgKHZpYSBNZW51VGlja2V0QmFzZSkgaGFzIGFuIGFycmF5IFRpY2tldElkcywgc28gd2UgcmVhZCB0aGF0XHJcbiAgICBjb25zdCB0aWNrZXRJZHMgPSBhd2FpdCBwb3NDb250cmFjdC5nZXRUaWNrZXRJZHMoKTtcclxuICAgIGNvbnN0IHRpY2tldHNBcnJheSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlja2V0SWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHRpY2tldElkQk4gPSB0aWNrZXRJZHNbaV07ICAvLyBCaWdJbnRcclxuICAgICAgY29uc3QgdGlja2V0SWQgPSBOdW1iZXIodGlja2V0SWRCTik7XHJcbiAgICAgIGNvbnN0IHRpY2tldFN0cnVjdCA9IGF3YWl0IHBvc0NvbnRyYWN0LmdldFRpY2tldCh0aWNrZXRJZCk7IFxyXG4gICAgICAvLyB0aWNrZXRTdHJ1Y3QgaGFzIHsgbmFtZSwgb3JkZXJzW10sIHNlcnZlciwgaWQsIHBhaWQgfVxyXG5cclxuICAgICAgdGlja2V0c0FycmF5LnB1c2goe1xyXG4gICAgICAgIGlkOiB0aWNrZXRTdHJ1Y3QuaWQudG9TdHJpbmcoKSxcclxuICAgICAgICBuYW1lOiB0aWNrZXRTdHJ1Y3QubmFtZSxcclxuICAgICAgICBzZXJ2ZXI6IHRpY2tldFN0cnVjdC5zZXJ2ZXIsXHJcbiAgICAgICAgcGFpZDogdGlja2V0U3RydWN0LnBhaWQsXHJcbiAgICAgICAgcG9zQWRkcmVzczogcG9zQWRkcmVzcyAvLyBTbyB3ZSBrbm93IHdoaWNoIFBPUyB0aGlzIHRpY2tldCBiZWxvbmdzIHRvXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERpc3BhdGNoIHRvIHN0b3JlIGluIFJlZHV4LiBcclxuICAgIC8vIFdlIGNhbiBzdG9yZSB0aGVtIFBPUy1ieS1QT1Mgb3IgaW4gYSBzaW5nbGUgYXJyYXkuIFxyXG4gICAgLy8gQmVsb3csIHdlIGp1c3QgcHVzaCB0aGVtIGFsbCBpbnRvIGEgc2luZ2xlIGFycmF5IGluIFJlZHV4OlxyXG4gICAgXHJcbiAgICBkaXNwYXRjaCh7IFxyXG4gICAgICB0eXBlOiAnVElDS0VUU19MT0FERUQnLCBcclxuICAgICAgcGF5bG9hZDogeyBwb3NBZGRyZXNzLCB0aWNrZXRzOiB0aWNrZXRzQXJyYXkgfSBcclxuICAgIH0pO1xyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyB0aWNrZXRzIGZvciBQT1M6JywgZXJyb3IpO1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnVElDS0VUU19MT0FEX0ZBSUwnLCBlcnJvciB9KTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHNldEFjdGl2ZVRpY2tldCA9IGFzeW5jIChkaXNwYXRjaCwgdGlja2V0KSA9PiB7XHJcbiAgZGlzcGF0Y2goeyB0eXBlOiAnQUNUSVZFX1RJQ0tFVF9TRVQnLCBwYXlsb2FkOiB0aWNrZXQgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRpY2tldCBpbiBSZWR1eC5cclxuICogQHBhcmFtIHtPYmplY3R9IGRpc3BhdGNoIFJlZHV4IGRpc3BhdGNoXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2xlYXJBY3RpdmVUaWNrZXQgPSBhc3luYyAoZGlzcGF0Y2gpID0+IHtcclxuICBkaXNwYXRjaCh7IHR5cGU6ICdBQ1RJVkVfVElDS0VUX0NMRUFSJyB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBhbGwgbWVudSBpdGVtcyBmb3IgYSBnaXZlbiBQT1MgY29udHJhY3QgYWRkcmVzcyBhbmQgcmV0dXJucyB0aGVtIGFzIGFuIGFycmF5LlxyXG4gKiBPcHRpb25hbGx5LCB5b3UgY291bGQgZGlzcGF0Y2ggYSBSZWR1eCBhY3Rpb24gdG8gc3RvcmUgdGhlbSBpZiBkZXNpcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHByb3ZpZGVyIEV0aGVycyBwcm92aWRlci9zaWduZXJcclxuICogQHBhcmFtIHtTdHJpbmd9IHBvc0FkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIFBPU1xyXG4gKiBAcGFyYW0ge0FycmF5fSBwb3NBYmkgVGhlIEFCSSBmb3IgdGhlIFBPUyBjb250cmFjdFxyXG4gKiBAcGFyYW0ge09iamVjdH0gZGlzcGF0Y2ggUmVkdXggZGlzcGF0Y2hcclxuICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiBtZW51IGl0ZW1zIFt7IGlkLCBuYW1lLCBjb3N0IH0sIC4uLl1cclxuICovXHJcbmV4cG9ydCBjb25zdCBsb2FkTWVudUl0ZW1zRm9yUE9TID0gYXN5bmMgKHNpZ25lciwgcG9zQWRkcmVzcywgcG9zQWJpLCBkaXNwYXRjaCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBPcHRpb25hbDogZGlzcGF0Y2goeyB0eXBlOiAnTUVOVV9JVEVNU19MT0FEX1JFUVVFU1QnIH0pO1xyXG5cclxuICAgIFxyXG4gICAgY29uc3QgcG9zQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHBvc0FkZHJlc3MsIFBPU19BQkksIHNpZ25lcik7XHJcbiAgICBjb25zdCBtZW51SXRlbUlkcyA9IGF3YWl0IHBvc0NvbnRyYWN0LmdldE1lbnVJdGVtSWRzKCk7XHJcbiAgICBcclxuXHJcbiAgICBsZXQgbWVudUl0ZW1zID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbnVJdGVtSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gTnVtYmVyKG1lbnVJdGVtSWRzW2ldKTtcclxuICAgICAgY29uc3QgaXRlbSA9IGF3YWl0IHBvc0NvbnRyYWN0Lm1lbnUoaWQpO1xyXG4gICAgICAvLyBDb252ZXJ0IGNvc3QgZnJvbSB3ZWkgdG8gRXRoZXIgKG9yIHlvdSBjYW4gc3RvcmUgcmF3IHdlaSkuXHJcbiAgICAgIG1lbnVJdGVtcy5wdXNoKHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgY29zdDogTnVtYmVyKGV0aGVycy5mb3JtYXRFdGhlcihpdGVtLmNvc3QpKSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3B0aW9uYWw6IGRpc3BhdGNoKHsgdHlwZTogJ01FTlVfSVRFTVNfRk9SX1BPU19MT0FERUQnLCBwYXlsb2FkOiBtZW51SXRlbXMgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1lbnVJdGVtcztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBtZW51IGZvciBQT1M6JywgZXJyb3IpO1xyXG4gICAgLy8gT3B0aW9uYWw6IGRpc3BhdGNoKHsgdHlwZTogJ01FTlVfSVRFTVNfTE9BRF9GQUlMJywgZXJyb3IgfSk7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRUaWNrZXRPcmRlcnMgPSBhc3luYyAoXHJcbiAgcHJvdmlkZXIsXHJcbiAgcG9zQWRkcmVzcyxcclxuICBwb3NBYmksXHJcbiAgdGlja2V0SWQsXHJcbiAgaXRlbXMsIC8vIGFycmF5IG9mIHsgY29zdCwgbmFtZSB9IHRvIGJlIGFwcGVuZGVkXHJcbiAgZGlzcGF0Y2hcclxuKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IHByb3ZpZGVyLmdldFNpZ25lcigpO1xyXG4gICAgY29uc3QgcG9zQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHBvc0FkZHJlc3MsIFBPU19BQkksIHNpZ25lcik7XHJcbiAgICBjb25zdCB0eCA9IGF3YWl0IHBvc0NvbnRyYWN0LmFkZFRpY2tldE9yZGVycyh0aWNrZXRJZCwgaXRlbXMpO1xyXG4gICAgYXdhaXQgdHgud2FpdCgpO1xyXG5cclxuICAgIC8vIE9wdGlvbmFsbHkgcmVsb2FkIHRoZSB1cGRhdGVkIHRpY2tldC4uLlxyXG4gICAgLy8gYXdhaXQgbG9hZEFsbFRpY2tldHNGb3JQT1MocHJvdmlkZXIsIHBvc0FkZHJlc3MsIHBvc0FiaSwgZGlzcGF0Y2gpO1xyXG5cclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0FERF9USUNLRVRfT1JERVJTX1NVQ0NFU1MnIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhZGRpbmcgb3JkZXJzOicsIGVycm9yKTtcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0FERF9USUNLRVRfT1JERVJTX0ZBSUwnLCBlcnJvciB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZEZ1bGxUaWNrZXREZXRhaWxzID0gYXN5bmMgKFxyXG4gIHByb3ZpZGVyLFxyXG4gIHBvc0FkZHJlc3MsXHJcbiAgcG9zQWJpLFxyXG4gIHRpY2tldElkLFxyXG4gIGRpc3BhdGNoXHJcbikgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBwcm92aWRlci5nZXRTaWduZXIoKTtcclxuICAgIGNvbnN0IHBvc0NvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChwb3NBZGRyZXNzLCBQT1NfQUJJLCBzaWduZXIpO1xyXG5cclxuICAgIC8vIEdyYWIgdGhlIGVudGlyZSB0aWNrZXQgc3RydWN0IGZyb20gdGhlIGNvbnRyYWN0XHJcbiAgICBjb25zdCB0aWNrZXRTdHJ1Y3QgPSBhd2FpdCBwb3NDb250cmFjdC5nZXRUaWNrZXQodGlja2V0SWQpO1xyXG4gICAgLy8gdGlja2V0U3RydWN0IC0+IHsgbmFtZSwgb3JkZXJzW10sIHNlcnZlciwgaWQsIHBhaWQgfVxyXG5cclxuICAgIC8vIENvbnZlcnQgb3JkZXJzW10gZnJvbSBjb250cmFjdCAoY29zdCBpbiB3ZWkpIHRvIGEgZnJpZW5kbGllciBKUyBhcnJheVxyXG4gICAgY29uc3Qgb3JkZXJzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpY2tldFN0cnVjdC5vcmRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgb3JkZXJJdGVtID0gdGlja2V0U3RydWN0Lm9yZGVyc1tpXTtcclxuICAgICAgb3JkZXJzLnB1c2goe1xyXG4gICAgICAgIG5hbWU6IG9yZGVySXRlbS5uYW1lLFxyXG4gICAgICAgIGNvc3Q6IE51bWJlcihldGhlcnMuZm9ybWF0RXRoZXIob3JkZXJJdGVtLmNvc3QpKSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZnVsbFRpY2tldCA9IHtcclxuICAgICAgaWQ6IE51bWJlcih0aWNrZXRTdHJ1Y3QuaWQpLnRvU3RyaW5nKCksXHJcbiAgICAgIG5hbWU6IHRpY2tldFN0cnVjdC5uYW1lLFxyXG4gICAgICBzZXJ2ZXI6IHRpY2tldFN0cnVjdC5zZXJ2ZXIsXHJcbiAgICAgIHBhaWQ6IHRpY2tldFN0cnVjdC5wYWlkLFxyXG4gICAgICBwb3NBZGRyZXNzLFxyXG4gICAgICBvcmRlcnNcclxuICAgIH07XHJcblxyXG4gICAgLy8gRGlzcGF0Y2ggc28gUmVkdXgga25vd3MgYWJvdXQgdGhlIGZ1bGx5IGRldGFpbGVkIHRpY2tldFxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnQUNUSVZFX1RJQ0tFVF9ERVRBSUxTX0xPQURFRCcsIHBheWxvYWQ6IGZ1bGxUaWNrZXQgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZnVsbCB0aWNrZXQgZGV0YWlsczonLCBlcnJvcik7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdBQ1RJVkVfVElDS0VUX0RFVEFJTFNfRkFJTCcsIGVycm9yIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBidWZmZXJJdGVtRm9yVGlja2V0ID0gKHRpY2tldElkLCBpdGVtKSA9PiB7XHJcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiAnQUREX0lURU1fVE9fUEVORElOR19CVUZGRVInLFxyXG4gICAgICBwYXlsb2FkOiB7IHRpY2tldElkLCBpdGVtIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAyKSBBIGZ1bmN0aW9uIHRoYXQgKnJpbmdzKiBhbGwgYnVmZmVyZWQgaXRlbXMgZm9yIGEgZ2l2ZW4gdGlja2V0SWRcclxuLy8gICAgYnkgY2FsbGluZyBgYWRkVGlja2V0T3JkZXJzYCBpbiB0aGUgUE9TIGNvbnRyYWN0LlxyXG5cclxuZXhwb3J0IGNvbnN0IHJpbmdCdWZmZXJlZEl0ZW1zID0gYXN5bmMgKFxyXG4gIHByb3ZpZGVyLFxyXG4gIHBvc0FkZHJlc3MsXHJcbiAgcGVuZGluZ09yZGVyQnVmZmVyLFxyXG4gIHBvc0FiaSxcclxuICB0aWNrZXRJZCwgICAgICAgLy8gY291bGQgYmUgYSBudW1iZXIgb3Igc3RyaW5nXHJcbiAgZGlzcGF0Y2gsXHJcbiAgZ2V0U3RhdGVcclxuKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHN0cmluZ0lkID0gdGlja2V0SWQudG9TdHJpbmcoKVxyXG5cclxuICAgIC8vIEdldCB0aGUgZW50aXJlIHBlbmRpbmcgYnVmZmVyXHJcbiAgIFxyXG4gICAgY29uc3QgaXRlbXNUb1JpbmcgPSBwZW5kaW5nT3JkZXJCdWZmZXJbc3RyaW5nSWRdIHx8IFtdXHJcblxyXG4gICAgaWYgKGl0ZW1zVG9SaW5nLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnTm8gaXRlbXMgdG8gcmluZyBmb3IgdGhpcyB0aWNrZXQuJylcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9ybWF0IHRoZW0gZm9yIHRoZSBjb250cmFjdFxyXG4gICAgY29uc3QgcnVuZ0l0ZW1zID0gaXRlbXNUb1JpbmcubWFwKChpdGVtKSA9PiAoe1xyXG4gICAgICBjb3N0OiBldGhlcnMucGFyc2VVbml0cyhpdGVtLmNvc3QudG9TdHJpbmcoKSwgJ2V0aGVyJyksXHJcbiAgICAgIG5hbWU6IGl0ZW0ubmFtZVxyXG4gICAgfSkpXHJcblxyXG4gICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgcHJvdmlkZXIuZ2V0U2lnbmVyKClcclxuICAgIGNvbnN0IHBvc0NvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChwb3NBZGRyZXNzLCBwb3NBYmksIHNpZ25lcilcclxuXHJcbiAgICAvLyBTZW5kIHRyYW5zYWN0aW9uXHJcbiAgICBjb25zb2xlLmxvZygnZnVuJylcclxuICAgIGNvbnN0IHR4ID0gYXdhaXQgcG9zQ29udHJhY3QuYWRkVGlja2V0T3JkZXJzKHRpY2tldElkLCBydW5nSXRlbXMpXHJcbiAgICBhd2FpdCB0eC53YWl0KClcclxuICAgIGNvbnNvbGUubG9nKCdmdW4nKVxyXG5cclxuICAgIC8vIE5vdyB0ZWxsIFJlZHV4IHdlIHN1Y2NlZWRlZFxyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiAnT1JERVJfUklOR19TVUNDRVNTJyxcclxuICAgICAgcGF5bG9hZDogeyBcclxuICAgICAgICB0aWNrZXRJZDogdGlja2V0SWQsICAvLyBwYXNzIGEgc3RyaW5nXHJcbiAgICAgICAgcnVuZ0l0ZW1zOiBpdGVtc1RvUmluZ1xyXG4gICAgICB9XHJcblxyXG4gICAgfSlcclxuICAgICAgXHJcbiAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IHJhbmcgaXRlbXMgZm9yIHRpY2tldDogJHtzdHJpbmdJZH1gKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiByaW5nQnVmZmVyZWRJdGVtczonLCBlcnJvcilcclxuICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IGNsb2NrSW5FbXBsb3llZSA9IGFzeW5jIChzaWduZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBlbXBsb3llZUlkKSA9PiB7XHJcbiAgXHJcbiAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCBzaWduZXIpO1xyXG4gIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuY2xvY2tJbihlbXBsb3llZUlkKTtcclxuICBhd2FpdCB0eC53YWl0KCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2xvY2tPdXRFbXBsb3llZSA9IGFzeW5jIChzaWduZXIsIGNvbnRyYWN0QWRkcmVzcywgYWJpLCBlbXBsb3llZUlkKSA9PiB7XHJcbiAgXHJcbiAgY29uc3QgY29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KGNvbnRyYWN0QWRkcmVzcywgYWJpLCBzaWduZXIpO1xyXG4gIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuY2xvY2tPdXQoZW1wbG95ZWVJZCk7XHJcbiAgYXdhaXQgdHgud2FpdCgpO1xyXG59O1xyXG5cclxuXHJcbi8vIEluIHN0b3JlL2ludGVyYWN0aW9ucy5qc1xyXG5cclxuLy8gc3RvcmUvaW50ZXJhY3Rpb25zLmpzXHJcbmV4cG9ydCBjb25zdCBmZXRjaEVtcGxveWVlU3RhdHVzRnJvbVNlcnZlciA9XHJcbiAgKHsgc2lnbmVyLCBjb250cmFjdEFkZHJlc3MsIGFiaSwgam9iTmFtZSB9KSA9PlxyXG4gIGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIDEpIFRoZSBwdWJsaWMgYWRkcmVzcyBvZiB0aGUgdXNlclxyXG4gICAgICBjb25zdCB1c2VyQWRkcmVzcyA9IGF3YWl0IHNpZ25lci5nZXRBZGRyZXNzKCk7XHJcblxyXG4gICAgICAvLyAyKSBCdWlsZCB0aGUgcGF5bG9hZFxyXG4gICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzcyxcclxuICAgICAgICB1c2VyQWRkcmVzcyxcclxuICAgICAgICBhYmksXHJcbiAgICAgICAgam9iTmFtZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gMykgUE9TVCB0byB5b3VyIGN1c3RvbSByb3V0ZVxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2VtcGxveWVlU3RhdHVzJywge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNlcnZlciBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgLy8gNCkgRGlzcGF0Y2ggaWYgeW91IHdhbnQgdG8gc3RvcmUgaW4gUmVkdXhcclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnRU1QTE9ZRUVfU1RBVFVTX0ZST01fU0VSVkVSJywgcGF5bG9hZDogZGF0YSB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGZldGNoRW1wbG95ZWVTdGF0dXNGcm9tU2VydmVyOicsIGVycm9yKTtcclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnRU1QTE9ZRUVfU1RBVFVTX0ZST01fU0VSVkVSX0VSUk9SJywgZXJyb3IgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuIl0sIm5hbWVzIjpbImV0aGVycyIsIlJFU1RBVVJBTlRfQUJJIiwiREVDRU5UUkFUQUxJVFlTRVJWSUNFRkFDVE9SWV9BQkkiLCJQT1NfQUJJIiwidXNlU2VsZWN0b3IiLCJHbG9iYWxSZXN0YXVyYW50cyIsImxvYWRQcm92aWRlciIsImRpc3BhdGNoIiwiY29ubmVjdGlvbiIsIkJyb3dzZXJQcm92aWRlciIsIndpbmRvdyIsImV0aGVyZXVtIiwidHlwZSIsImxvYWRBY2NvdW50IiwicHJvdmlkZXIiLCJhY2NvdW50cyIsInNlbmQiLCJhY2NvdW50IiwiZ2V0QWRkcmVzcyIsImxvYWROZXR3b3JrIiwiY2hhaW5JZCIsImdldE5ldHdvcmsiLCJOdW1iZXIiLCJzdWJzY3JpYmVUb0V2ZW50cyIsInJlc3RhdXJhbnRGYWN0b3J5IiwiUmVzdGF1cmFudHMiLCJvbiIsInJlc3RhdXJhbnQiLCJpZCIsIm93bmVyIiwiZXZlbnQiLCJfcmVzdGF1cmFudCIsImFyZ3MiLCJ0aW1lc3RhbXAiLCJqb2IiLCJsb2FkRmFjdG9yeSIsInVzZXIiLCJhZGRyZXNzMSIsImFkZHJlc3MiLCJkZWNlbnRyYXRhbGl0eVNlcnZpY2VGYWN0b3J5IiwiQ29udHJhY3QiLCJhYmkiLCJnZXRTaWduZXIiLCJsb2FkQWxsUmVzdGF1cmFudHMiLCJmYWN0b3J5IiwicmVzdGF1cmFudEFkZHJlc3NlcyIsImdldEFsbFJlc3RhdXJhbnRzIiwiaSIsImxlbmd0aCIsInJlc3RhdXJhbnRBZGRyZXNzIiwicmVzdGF1cmFudENvbnRyYWN0IiwibmFtZSIsImJhbGFuY2UiLCJnZXRCYWxhbmNlIiwicHVzaCIsImZvcm1hdEV0aGVyIiwiY29uc29sZSIsImxvZyIsImxvYWRNeVJlc3RhdXJhbnRzIiwibXlSZXN0YXVyYW50cyIsImZpbHRlciIsImRlY29yYXRlTXlSZXN0YXVyYW50cyIsImRlY29yYXRlZFJlc3RhdXJhbnRzIiwiY29udHJhY3QiLCJteU5hbWUiLCJ0b1N0cmluZyIsImNhc2giLCJlcnJvciIsImNyZWF0ZU5ld1Jlc3RhdXJhbnQiLCJyZXN0YXVyYW50TmFtZSIsInRvdGFsQ29zdFdlaSIsInRvdGFsQ29zdCIsIkJpZ0ludCIsIk1hdGgiLCJmbG9vciIsImFsZXJ0IiwidHgiLCJjcmVhdGVSZXN0YXVyYW50IiwidmFsdWUiLCJ3YWl0IiwibG9hZERhc2hib2FyZFJlc3RhdXJhbnRDb250cmFjdERhdGEiLCJSZXN0YXVyYW50IiwiY29udHJhY3RBZGRyZXNzIiwibXlDYXNoIiwiY3JlYXRlTmV3Sm9iIiwid2FnZSIsImFkZEpvYiIsImxvYWRBbGxKb2JzIiwiaGlyZU5ld0VtcGxveWVlIiwiam9iSWQiLCJlbXBsb3llZUFkZHJlc3MiLCJoaXJlRW1wbG95ZWUiLCJsb2FkQWxsRW1wbG95ZWVzIiwiZW1wbG95ZWVJZHMiLCJnZXRFbXBsb3llZUlkcyIsImVtcGxveWVlc0FycmF5IiwiZW1wbG95ZWVJZCIsImVtcGxveWVlIiwiZW1wbG95ZWVzIiwiY2xvY2tTdGFtcCIsImVtcGxveWVlUGVuc2lvbiIsImpvYklkcyIsImdldEpvYklkcyIsImpvYnNBcnJheSIsImpvYnMiLCJob3VybHlXYWdlSW5XZWkiLCJqb2JOYW1lIiwibWVzc2FnZSIsInN0YXJ0U2VydmljZSIsInJlY2VpcHQiLCJibG9jayIsImdldEJsb2NrIiwiYmxvY2tOdW1iZXIiLCJzZXJ2aWNlU3RhcnRUaW1lIiwibG9hZEFsbFNlcnZpY2VzIiwic2VydmljZUlkcyIsImdldFNlcnZpY2VJZHMiLCJzZXJ2aWNlc0FycmF5Iiwic2VydmljZUlkIiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImNvc3QiLCJwcm9maXQiLCJyZXZlbnVlIiwiZW5kU2VydmljZSIsImNyZWF0ZVBPUyIsInNpZ25lciIsImxvZ3MiLCJtYXAiLCJpbnRlcmZhY2UiLCJwYXJzZUxvZyIsImZpbmQiLCJwYXJzZWRMb2ciLCJwb3NJZCIsInBvc0FkZHJlc3MiLCJwb3MiLCJsb2FkQWxsUE9TIiwicG9zSWRzIiwiZ2V0UE9TSWRzIiwicG9zQXJyYXkiLCJQT1NNYXBwaW5nIiwicG9zQ29udHJhY3QiLCJwb3NOYW1lIiwiZ2V0TmFtZSIsImxvYWRBbGxNZW51SXRlbXMiLCJwb3NBZGRyZXNzZXMiLCJnZXRBbGxQT1NBZGRyZXNzZXMiLCJwYXlsb2FkIiwiZmlyc3RQT1NBZGRyZXNzIiwibWVudUl0ZW1JZHMiLCJnZXRNZW51SXRlbUlkcyIsIm1lbnVJdGVtcyIsIm1lbnVJdGVtIiwibWVudSIsImFkZE5ld01lbnVJdGVtIiwiY29zdEluV2VpIiwicGFyc2VVbml0cyIsImFkZE1lbnVJdGVtIiwibG9hZEVtcGxveWVlUmVsZXZhbnRQT1MiLCJjcmVhdGVUaWNrZXRGb3JQT1MiLCJwb3NBYmkiLCJ0aWNrZXROYW1lIiwic2VydmVyQWRkcmVzcyIsImNyZWF0ZVRpY2tldCIsImxvYWRBbGxUaWNrZXRzRm9yUE9TIiwidGlja2V0SWRzIiwiZ2V0VGlja2V0SWRzIiwidGlja2V0c0FycmF5IiwidGlja2V0SWRCTiIsInRpY2tldElkIiwidGlja2V0U3RydWN0IiwiZ2V0VGlja2V0Iiwic2VydmVyIiwicGFpZCIsInRpY2tldHMiLCJzZXRBY3RpdmVUaWNrZXQiLCJ0aWNrZXQiLCJjbGVhckFjdGl2ZVRpY2tldCIsImxvYWRNZW51SXRlbXNGb3JQT1MiLCJpdGVtIiwiYWRkVGlja2V0T3JkZXJzIiwiaXRlbXMiLCJsb2FkRnVsbFRpY2tldERldGFpbHMiLCJvcmRlcnMiLCJvcmRlckl0ZW0iLCJmdWxsVGlja2V0IiwiYnVmZmVySXRlbUZvclRpY2tldCIsInJpbmdCdWZmZXJlZEl0ZW1zIiwicGVuZGluZ09yZGVyQnVmZmVyIiwiZ2V0U3RhdGUiLCJzdHJpbmdJZCIsIml0ZW1zVG9SaW5nIiwicnVuZ0l0ZW1zIiwiY2xvY2tJbkVtcGxveWVlIiwiY2xvY2tJbiIsImNsb2NrT3V0RW1wbG95ZWUiLCJjbG9ja091dCIsImZldGNoRW1wbG95ZWVTdGF0dXNGcm9tU2VydmVyIiwidXNlckFkZHJlc3MiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/store/interactions.js\n"));

/***/ })

});